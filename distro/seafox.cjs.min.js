'use strict';
function create(e) {
  return {
    source: e,
    flags: 0,
    index: 0,
    start: 0,
    endIndex: 0,
    lastColumn: 0,
    column: 0,
    line: 0,
    lineBase: 1,
    offset: 0,
    length: e.length,
    prevLinebase: 1,
    isUnicodeEscape: 0,
    token: 16777216,
    newLine: 0,
    tokenValue: void 0,
    tokenRaw: '',
    tokenRegExp: void 0,
    lastChar: 0,
    assignable: 1,
    exportedNames: [],
    exportedBindings: []
  };
}
Object.defineProperty(exports, '__esModule', { value: !0 });
const unicodeLookup = ((e, t) => {
    const n = new Uint32Array(139264);
    let r = 0,
      o = 0;
    for (; r < 2341; ) {
      const s = e[r++];
      if (s < 0) o -= s;
      else {
        let a = e[r++];
        2 & s && (a = t[a]), 1 & s ? n.fill(a, o, (o += e[r++])) : (n[o++] = a);
      }
    }
    return n;
  })(
    [
      -1,
      2,
      27,
      2,
      28,
      2,
      5,
      -1,
      0,
      77595648,
      3,
      46,
      2,
      3,
      0,
      14,
      2,
      57,
      2,
      58,
      3,
      0,
      3,
      0,
      3168796671,
      0,
      4294956992,
      2,
      1,
      2,
      0,
      2,
      59,
      3,
      0,
      4,
      0,
      4294966523,
      3,
      0,
      4,
      2,
      16,
      2,
      60,
      2,
      0,
      0,
      4294836735,
      0,
      3221225471,
      0,
      4294901942,
      2,
      61,
      0,
      134152192,
      3,
      0,
      2,
      0,
      4294951935,
      3,
      0,
      2,
      0,
      2683305983,
      0,
      2684354047,
      2,
      17,
      2,
      0,
      0,
      4294961151,
      3,
      0,
      2,
      2,
      20,
      2,
      0,
      0,
      608174079,
      2,
      0,
      2,
      128,
      2,
      6,
      2,
      62,
      -1,
      2,
      64,
      2,
      25,
      2,
      1,
      3,
      0,
      3,
      0,
      4294901711,
      2,
      41,
      0,
      4089839103,
      0,
      2961209759,
      0,
      1342439375,
      0,
      4294543342,
      0,
      3547201023,
      0,
      1577204103,
      0,
      4194240,
      0,
      4294688750,
      2,
      2,
      0,
      80831,
      0,
      4261478351,
      0,
      4294549486,
      2,
      2,
      0,
      2965387679,
      0,
      196559,
      0,
      3594373100,
      0,
      3288319768,
      0,
      8469959,
      0,
      65472,
      0,
      4294828031,
      0,
      3825204735,
      0,
      123747807,
      0,
      65487,
      2,
      3,
      0,
      4092591615,
      0,
      1080049119,
      0,
      458703,
      2,
      3,
      2,
      0,
      0,
      2163244511,
      0,
      4227923919,
      0,
      4236247020,
      2,
      69,
      0,
      4284449919,
      0,
      851904,
      2,
      4,
      2,
      11,
      0,
      67076095,
      -1,
      2,
      70,
      0,
      1073741743,
      0,
      4093591391,
      -1,
      0,
      50331649,
      0,
      3265266687,
      2,
      35,
      0,
      4294844415,
      0,
      4278190047,
      2,
      22,
      2,
      126,
      -1,
      3,
      0,
      2,
      2,
      32,
      2,
      0,
      2,
      9,
      2,
      0,
      2,
      14,
      2,
      15,
      3,
      0,
      10,
      2,
      72,
      2,
      0,
      2,
      73,
      2,
      74,
      2,
      75,
      2,
      0,
      2,
      76,
      2,
      0,
      2,
      10,
      0,
      261632,
      2,
      19,
      3,
      0,
      2,
      2,
      12,
      2,
      4,
      3,
      0,
      18,
      2,
      77,
      2,
      5,
      3,
      0,
      2,
      2,
      78,
      0,
      2088959,
      2,
      30,
      2,
      8,
      0,
      909311,
      3,
      0,
      2,
      0,
      814743551,
      2,
      43,
      0,
      67057664,
      3,
      0,
      2,
      2,
      42,
      2,
      0,
      2,
      31,
      2,
      0,
      2,
      18,
      2,
      7,
      0,
      268374015,
      2,
      29,
      2,
      51,
      2,
      0,
      2,
      79,
      0,
      134153215,
      -1,
      2,
      6,
      2,
      0,
      2,
      7,
      0,
      2684354559,
      0,
      67044351,
      0,
      1073676416,
      -2,
      3,
      0,
      2,
      2,
      44,
      0,
      1046528,
      3,
      0,
      3,
      2,
      8,
      2,
      0,
      2,
      52,
      0,
      4294960127,
      2,
      9,
      2,
      40,
      2,
      10,
      0,
      4294377472,
      2,
      11,
      3,
      0,
      7,
      0,
      4227858431,
      3,
      0,
      8,
      2,
      12,
      2,
      0,
      2,
      81,
      2,
      9,
      2,
      0,
      2,
      82,
      2,
      83,
      2,
      84,
      -1,
      2,
      122,
      0,
      1048577,
      2,
      85,
      2,
      13,
      -1,
      2,
      13,
      0,
      131042,
      2,
      86,
      2,
      87,
      2,
      88,
      2,
      0,
      2,
      36,
      -83,
      2,
      0,
      2,
      54,
      2,
      7,
      3,
      0,
      4,
      0,
      1046559,
      2,
      0,
      2,
      14,
      2,
      0,
      0,
      2147516671,
      2,
      23,
      3,
      89,
      2,
      2,
      0,
      -16,
      2,
      90,
      0,
      524222462,
      2,
      4,
      2,
      0,
      0,
      4269801471,
      2,
      4,
      2,
      0,
      2,
      15,
      2,
      80,
      2,
      16,
      3,
      0,
      2,
      2,
      49,
      2,
      11,
      -1,
      2,
      17,
      -16,
      3,
      0,
      205,
      2,
      18,
      -2,
      3,
      0,
      655,
      2,
      19,
      3,
      0,
      36,
      2,
      71,
      -1,
      2,
      17,
      2,
      9,
      3,
      0,
      8,
      2,
      92,
      2,
      119,
      2,
      0,
      0,
      3220242431,
      3,
      0,
      3,
      2,
      20,
      2,
      21,
      2,
      93,
      3,
      0,
      2,
      2,
      94,
      2,
      0,
      2,
      95,
      2,
      21,
      2,
      0,
      2,
      26,
      2,
      0,
      2,
      8,
      3,
      0,
      2,
      0,
      67043391,
      0,
      3909091327,
      2,
      0,
      2,
      24,
      2,
      8,
      2,
      22,
      3,
      0,
      2,
      0,
      67076097,
      2,
      7,
      2,
      0,
      2,
      23,
      0,
      67059711,
      0,
      4236247039,
      3,
      0,
      2,
      0,
      939524103,
      0,
      8191999,
      2,
      98,
      2,
      99,
      2,
      15,
      2,
      33,
      3,
      0,
      3,
      0,
      67057663,
      3,
      0,
      349,
      2,
      100,
      2,
      101,
      2,
      6,
      -264,
      3,
      0,
      11,
      2,
      24,
      3,
      0,
      2,
      2,
      34,
      -1,
      0,
      3774349439,
      2,
      102,
      2,
      103,
      3,
      0,
      2,
      2,
      20,
      2,
      25,
      3,
      0,
      10,
      2,
      9,
      2,
      17,
      2,
      0,
      2,
      47,
      2,
      0,
      2,
      26,
      2,
      104,
      2,
      19,
      0,
      1638399,
      0,
      57344,
      2,
      105,
      3,
      0,
      3,
      2,
      22,
      2,
      27,
      2,
      28,
      2,
      5,
      2,
      29,
      2,
      0,
      2,
      7,
      2,
      106,
      -1,
      2,
      107,
      2,
      108,
      2,
      109,
      -1,
      3,
      0,
      3,
      2,
      11,
      -2,
      2,
      0,
      2,
      30,
      -3,
      0,
      536870912,
      -4,
      2,
      22,
      2,
      0,
      2,
      38,
      0,
      1,
      2,
      0,
      2,
      63,
      2,
      31,
      2,
      11,
      2,
      9,
      2,
      0,
      2,
      110,
      -1,
      3,
      0,
      4,
      2,
      9,
      2,
      32,
      2,
      111,
      2,
      6,
      2,
      0,
      2,
      33,
      2,
      0,
      2,
      50,
      -4,
      3,
      0,
      9,
      2,
      23,
      2,
      18,
      2,
      26,
      -4,
      2,
      112,
      2,
      113,
      2,
      18,
      2,
      23,
      2,
      7,
      -2,
      2,
      114,
      2,
      18,
      2,
      34,
      -2,
      2,
      0,
      2,
      115,
      -2,
      0,
      4277137519,
      0,
      2269118463,
      -1,
      3,
      22,
      2,
      -1,
      2,
      35,
      2,
      39,
      2,
      0,
      3,
      18,
      2,
      2,
      37,
      2,
      20,
      -3,
      3,
      0,
      2,
      2,
      36,
      -1,
      2,
      0,
      2,
      37,
      2,
      0,
      2,
      37,
      2,
      0,
      2,
      48,
      -14,
      2,
      22,
      2,
      45,
      2,
      38,
      -4,
      2,
      23,
      3,
      0,
      2,
      2,
      39,
      0,
      2147549120,
      2,
      0,
      2,
      11,
      2,
      17,
      2,
      134,
      2,
      0,
      2,
      53,
      0,
      4294901872,
      0,
      5242879,
      3,
      0,
      2,
      0,
      402595359,
      -1,
      2,
      118,
      0,
      1090519039,
      -2,
      2,
      120,
      2,
      40,
      2,
      0,
      0,
      67045375,
      2,
      41,
      0,
      4226678271,
      0,
      3766565279,
      0,
      2039759,
      -4,
      3,
      0,
      2,
      0,
      3288270847,
      -1,
      3,
      0,
      2,
      0,
      67043519,
      -5,
      2,
      0,
      0,
      4282384383,
      0,
      1056964609,
      -1,
      3,
      0,
      2,
      0,
      67043345,
      -1,
      2,
      0,
      2,
      42,
      2,
      43,
      -1,
      2,
      10,
      2,
      44,
      -6,
      2,
      0,
      2,
      11,
      -3,
      3,
      0,
      2,
      0,
      2147484671,
      -5,
      2,
      123,
      0,
      4244635647,
      0,
      27,
      2,
      0,
      2,
      7,
      2,
      45,
      2,
      0,
      2,
      65,
      -1,
      2,
      0,
      2,
      42,
      -8,
      2,
      55,
      2,
      46,
      0,
      67043329,
      2,
      124,
      2,
      47,
      0,
      8388351,
      -2,
      2,
      125,
      0,
      3028287487,
      2,
      48,
      2,
      127,
      0,
      33259519,
      2,
      43,
      -9,
      2,
      23,
      -8,
      3,
      0,
      28,
      2,
      34,
      -3,
      3,
      0,
      3,
      2,
      49,
      3,
      0,
      6,
      2,
      50,
      -85,
      3,
      0,
      33,
      2,
      49,
      -126,
      3,
      0,
      18,
      2,
      39,
      -269,
      3,
      0,
      17,
      2,
      42,
      2,
      7,
      2,
      43,
      -2,
      2,
      17,
      2,
      51,
      2,
      0,
      2,
      23,
      0,
      67043343,
      2,
      129,
      2,
      19,
      -21,
      3,
      0,
      2,
      -4,
      3,
      0,
      2,
      0,
      4294936575,
      2,
      0,
      0,
      4294934783,
      -2,
      2,
      130,
      3,
      0,
      191,
      2,
      52,
      3,
      0,
      23,
      2,
      37,
      -296,
      3,
      0,
      8,
      2,
      7,
      -1,
      2,
      131,
      2,
      132,
      3,
      0,
      11,
      2,
      6,
      -72,
      3,
      0,
      3,
      2,
      133,
      0,
      1677656575,
      -166,
      0,
      4161266656,
      0,
      4071,
      0,
      15360,
      -4,
      0,
      28,
      -13,
      3,
      0,
      2,
      2,
      53,
      2,
      0,
      2,
      135,
      2,
      136,
      2,
      56,
      2,
      0,
      2,
      137,
      2,
      138,
      2,
      139,
      3,
      0,
      10,
      2,
      140,
      2,
      141,
      2,
      15,
      3,
      53,
      2,
      3,
      54,
      2,
      3,
      55,
      2,
      0,
      4294954999,
      2,
      0,
      -16,
      2,
      0,
      2,
      91,
      2,
      0,
      0,
      2105343,
      0,
      4160749584,
      0,
      65534,
      -42,
      0,
      4194303871,
      0,
      2011,
      -6,
      2,
      0,
      0,
      1073684479,
      0,
      17407,
      -11,
      2,
      0,
      2,
      34,
      -40,
      3,
      0,
      6,
      0,
      8323103,
      -1,
      3,
      0,
      2,
      2,
      44,
      -37,
      2,
      56,
      2,
      144,
      2,
      145,
      2,
      146,
      2,
      147,
      2,
      148,
      -138,
      3,
      0,
      1334,
      2,
      23,
      -1,
      3,
      0,
      129,
      2,
      30,
      3,
      0,
      6,
      2,
      9,
      3,
      0,
      180,
      2,
      149,
      3,
      0,
      233,
      0,
      1,
      -96,
      3,
      0,
      16,
      2,
      9,
      -22583,
      3,
      0,
      7,
      2,
      19,
      -6130,
      3,
      5,
      2,
      -1,
      0,
      69207040,
      3,
      46,
      2,
      3,
      0,
      14,
      2,
      57,
      2,
      58,
      -3,
      0,
      3168731136,
      0,
      4294956864,
      2,
      1,
      2,
      0,
      2,
      59,
      3,
      0,
      4,
      0,
      4294966275,
      3,
      0,
      4,
      2,
      16,
      2,
      60,
      2,
      0,
      2,
      36,
      -1,
      2,
      17,
      2,
      61,
      -1,
      2,
      0,
      2,
      62,
      0,
      4294885376,
      3,
      0,
      2,
      0,
      3145727,
      0,
      2617294944,
      0,
      4294770688,
      2,
      19,
      2,
      63,
      3,
      0,
      2,
      0,
      131135,
      2,
      96,
      0,
      70256639,
      0,
      71303167,
      0,
      272,
      2,
      42,
      2,
      62,
      -1,
      2,
      64,
      -2,
      2,
      97,
      2,
      65,
      0,
      4278255616,
      0,
      4294836227,
      0,
      4294549473,
      0,
      600178175,
      0,
      2952806400,
      0,
      268632067,
      0,
      4294543328,
      0,
      57540095,
      0,
      1577058304,
      0,
      1835008,
      0,
      4294688736,
      2,
      66,
      2,
      67,
      0,
      33554435,
      2,
      121,
      2,
      66,
      0,
      2952790016,
      0,
      131075,
      0,
      3594373096,
      0,
      67094296,
      2,
      67,
      -1,
      2,
      68,
      0,
      603979263,
      0,
      117440512,
      0,
      3,
      0,
      4294828001,
      0,
      602930687,
      0,
      1073741824,
      0,
      393219,
      2,
      68,
      0,
      671088639,
      0,
      2154840064,
      0,
      4227858435,
      0,
      4236247008,
      2,
      69,
      2,
      39,
      -1,
      2,
      4,
      0,
      917503,
      2,
      39,
      -1,
      2,
      70,
      0,
      537788335,
      0,
      4026531935,
      -1,
      0,
      1,
      -1,
      2,
      35,
      2,
      71,
      0,
      7936,
      -3,
      2,
      0,
      0,
      2147485695,
      0,
      1010761728,
      0,
      4292984930,
      0,
      16387,
      2,
      0,
      2,
      14,
      2,
      15,
      3,
      0,
      10,
      2,
      72,
      2,
      0,
      2,
      73,
      2,
      74,
      2,
      75,
      2,
      0,
      2,
      76,
      2,
      0,
      2,
      11,
      -1,
      2,
      19,
      3,
      0,
      2,
      2,
      12,
      2,
      4,
      3,
      0,
      18,
      2,
      77,
      2,
      5,
      3,
      0,
      2,
      2,
      78,
      0,
      253951,
      3,
      20,
      2,
      0,
      122879,
      2,
      0,
      2,
      8,
      0,
      276824064,
      -2,
      3,
      0,
      2,
      2,
      42,
      2,
      0,
      0,
      4294903295,
      2,
      0,
      2,
      18,
      2,
      7,
      -1,
      2,
      17,
      2,
      51,
      2,
      0,
      2,
      79,
      2,
      43,
      -1,
      2,
      23,
      2,
      0,
      2,
      30,
      -2,
      0,
      128,
      -2,
      2,
      80,
      2,
      8,
      0,
      4064,
      -1,
      2,
      117,
      0,
      4227907585,
      2,
      0,
      2,
      116,
      2,
      0,
      2,
      50,
      0,
      4227915776,
      2,
      9,
      2,
      40,
      2,
      10,
      -1,
      0,
      74440192,
      3,
      0,
      6,
      -2,
      3,
      0,
      8,
      2,
      12,
      2,
      0,
      2,
      81,
      2,
      9,
      2,
      0,
      2,
      82,
      2,
      83,
      2,
      84,
      -3,
      2,
      85,
      2,
      13,
      -3,
      2,
      86,
      2,
      87,
      2,
      88,
      2,
      0,
      2,
      36,
      -83,
      2,
      0,
      2,
      54,
      2,
      7,
      3,
      0,
      4,
      0,
      817183,
      2,
      0,
      2,
      14,
      2,
      0,
      0,
      33023,
      2,
      23,
      3,
      89,
      2,
      -17,
      2,
      90,
      0,
      524157950,
      2,
      4,
      2,
      0,
      2,
      91,
      2,
      4,
      2,
      0,
      2,
      15,
      2,
      80,
      2,
      16,
      3,
      0,
      2,
      2,
      49,
      2,
      11,
      -1,
      2,
      17,
      -16,
      3,
      0,
      205,
      2,
      18,
      -2,
      3,
      0,
      655,
      2,
      19,
      3,
      0,
      36,
      2,
      71,
      -1,
      2,
      17,
      2,
      9,
      3,
      0,
      8,
      2,
      92,
      0,
      3072,
      2,
      0,
      0,
      2147516415,
      2,
      9,
      3,
      0,
      2,
      2,
      19,
      2,
      21,
      2,
      93,
      3,
      0,
      2,
      2,
      94,
      2,
      0,
      2,
      95,
      2,
      21,
      0,
      4294965179,
      0,
      7,
      2,
      0,
      2,
      8,
      2,
      93,
      2,
      8,
      -1,
      0,
      1761345536,
      2,
      96,
      0,
      4294901823,
      2,
      39,
      2,
      22,
      2,
      97,
      2,
      37,
      2,
      150,
      0,
      2080440287,
      2,
      0,
      2,
      36,
      2,
      142,
      0,
      3296722943,
      2,
      0,
      0,
      1046675455,
      0,
      939524101,
      0,
      1837055,
      2,
      98,
      2,
      99,
      2,
      15,
      2,
      33,
      3,
      0,
      3,
      0,
      7,
      3,
      0,
      349,
      2,
      100,
      2,
      101,
      2,
      6,
      -264,
      3,
      0,
      11,
      2,
      24,
      3,
      0,
      2,
      2,
      34,
      -1,
      0,
      2700607615,
      2,
      102,
      2,
      103,
      3,
      0,
      2,
      2,
      20,
      2,
      25,
      3,
      0,
      10,
      2,
      9,
      2,
      17,
      2,
      0,
      2,
      47,
      2,
      0,
      2,
      26,
      2,
      104,
      -3,
      2,
      105,
      3,
      0,
      3,
      2,
      22,
      -1,
      3,
      5,
      2,
      2,
      29,
      2,
      0,
      2,
      7,
      2,
      106,
      -1,
      2,
      107,
      2,
      108,
      2,
      109,
      -1,
      3,
      0,
      3,
      2,
      11,
      -2,
      2,
      0,
      2,
      30,
      -8,
      2,
      22,
      2,
      0,
      2,
      38,
      -1,
      2,
      0,
      2,
      63,
      2,
      31,
      2,
      18,
      2,
      9,
      2,
      0,
      2,
      110,
      -1,
      3,
      0,
      4,
      2,
      9,
      2,
      17,
      2,
      111,
      2,
      6,
      2,
      0,
      2,
      33,
      2,
      0,
      2,
      50,
      -4,
      3,
      0,
      9,
      2,
      23,
      2,
      18,
      2,
      26,
      -4,
      2,
      112,
      2,
      113,
      2,
      18,
      2,
      23,
      2,
      7,
      -2,
      2,
      114,
      2,
      18,
      2,
      34,
      -2,
      2,
      0,
      2,
      115,
      -2,
      0,
      4277075969,
      2,
      18,
      -1,
      3,
      22,
      2,
      -1,
      2,
      35,
      2,
      143,
      2,
      0,
      3,
      18,
      2,
      2,
      37,
      2,
      20,
      -3,
      3,
      0,
      2,
      2,
      36,
      -1,
      2,
      0,
      2,
      37,
      2,
      0,
      2,
      37,
      2,
      0,
      2,
      50,
      -14,
      2,
      22,
      2,
      45,
      2,
      116,
      -4,
      2,
      23,
      2,
      117,
      2,
      52,
      -2,
      2,
      117,
      2,
      19,
      2,
      17,
      2,
      36,
      2,
      117,
      2,
      39,
      0,
      4294901776,
      0,
      4718591,
      2,
      117,
      2,
      37,
      0,
      335544350,
      -1,
      2,
      118,
      2,
      119,
      -2,
      2,
      120,
      2,
      40,
      2,
      7,
      -1,
      2,
      121,
      2,
      66,
      0,
      3758161920,
      0,
      3,
      -4,
      2,
      0,
      2,
      30,
      0,
      2147485568,
      -1,
      2,
      0,
      2,
      19,
      0,
      176,
      -5,
      2,
      0,
      2,
      49,
      0,
      251658240,
      -1,
      2,
      0,
      2,
      19,
      0,
      16,
      -1,
      2,
      0,
      0,
      16779263,
      -2,
      2,
      11,
      -7,
      2,
      0,
      2,
      119,
      -3,
      3,
      0,
      2,
      2,
      122,
      -5,
      2,
      123,
      2,
      38,
      0,
      10,
      0,
      4294965249,
      0,
      67633151,
      0,
      4026597376,
      2,
      0,
      0,
      536871935,
      -1,
      2,
      0,
      2,
      42,
      -8,
      2,
      55,
      2,
      49,
      0,
      1,
      2,
      124,
      2,
      19,
      -3,
      2,
      125,
      2,
      38,
      2,
      126,
      2,
      127,
      0,
      16778239,
      -10,
      2,
      37,
      -8,
      3,
      0,
      28,
      2,
      34,
      -3,
      3,
      0,
      3,
      2,
      49,
      3,
      0,
      6,
      2,
      50,
      -85,
      3,
      0,
      33,
      2,
      49,
      -126,
      3,
      0,
      18,
      2,
      39,
      -269,
      3,
      0,
      17,
      2,
      42,
      2,
      7,
      -3,
      2,
      17,
      2,
      128,
      2,
      0,
      2,
      19,
      2,
      50,
      2,
      129,
      2,
      19,
      -21,
      3,
      0,
      2,
      -4,
      3,
      0,
      2,
      0,
      67583,
      -1,
      2,
      25,
      -2,
      2,
      130,
      3,
      0,
      191,
      2,
      52,
      3,
      0,
      23,
      2,
      37,
      -296,
      3,
      0,
      8,
      2,
      7,
      -1,
      2,
      131,
      2,
      132,
      3,
      0,
      11,
      2,
      6,
      -72,
      3,
      0,
      3,
      2,
      133,
      2,
      134,
      -187,
      3,
      0,
      2,
      2,
      53,
      2,
      0,
      2,
      135,
      2,
      136,
      2,
      56,
      2,
      0,
      2,
      137,
      2,
      138,
      2,
      139,
      3,
      0,
      10,
      2,
      140,
      2,
      141,
      2,
      15,
      3,
      53,
      2,
      3,
      54,
      2,
      3,
      55,
      2,
      2,
      142,
      -73,
      2,
      0,
      0,
      1065361407,
      0,
      16384,
      -11,
      2,
      0,
      2,
      119,
      -40,
      3,
      0,
      6,
      2,
      143,
      -1,
      3,
      0,
      2,
      0,
      2063,
      -37,
      2,
      56,
      2,
      144,
      2,
      145,
      2,
      146,
      2,
      147,
      2,
      148,
      -138,
      3,
      0,
      1334,
      2,
      23,
      -1,
      3,
      0,
      129,
      2,
      30,
      3,
      0,
      6,
      2,
      9,
      3,
      0,
      180,
      2,
      149,
      3,
      0,
      233,
      0,
      1,
      -96,
      3,
      0,
      16,
      2,
      9,
      -28719,
      0,
      9216,
      -256,
      0,
      768,
      -34562,
      0,
      32,
      0,
      1,
      -174,
      0,
      1,
      -75,
      0,
      9727,
      2,
      150,
      2,
      122,
      -125,
      0,
      1,
      -1654,
      2,
      122,
      -7,
      2,
      150,
      -32768
    ],
    [
      4294967295,
      4294967291,
      4092460543,
      4294828015,
      4294967294,
      134217726,
      268435455,
      2147483647,
      1048575,
      1073741823,
      3892314111,
      134217727,
      1061158911,
      536805376,
      4294910143,
      4160749567,
      4294901759,
      4294901760,
      4194303,
      65535,
      262143,
      4286578688,
      536870911,
      8388607,
      4294918143,
      4294443008,
      255,
      67043328,
      2281701374,
      4294967232,
      2097151,
      4294903807,
      4294902783,
      4294902015,
      67108863,
      4294967039,
      511,
      524287,
      131071,
      127,
      4294902271,
      4294549487,
      33554431,
      1023,
      67047423,
      4294901888,
      4286578687,
      4294770687,
      67043583,
      32767,
      15,
      2047999,
      16777215,
      4292870143,
      4294934527,
      4294966783,
      4294967279,
      262083,
      20511,
      4290772991,
      41943039,
      493567,
      2047,
      4294959104,
      1071644671,
      603979775,
      602799615,
      65536,
      4294828e3,
      805044223,
      4294965206,
      8191,
      1031749119,
      4294917631,
      2134769663,
      4286578493,
      4282253311,
      4294942719,
      33540095,
      4294905855,
      4294967264,
      2868854591,
      1608515583,
      265232348,
      534519807,
      2147614720,
      1060109444,
      4093640016,
      17376,
      2139062143,
      224,
      4169138175,
      4294909951,
      4294967292,
      4294965759,
      124,
      4294966272,
      4294967280,
      8289918,
      4294934399,
      4294901775,
      4294965375,
      1602223615,
      4294967259,
      268369920,
      4292804608,
      486341884,
      4294963199,
      3087007615,
      1073692671,
      4128527,
      4279238655,
      4294966591,
      2445279231,
      3670015,
      3238002687,
      63,
      4294967288,
      4294705151,
      4095,
      3221208447,
      4294549472,
      2147483648,
      4294966527,
      4294705152,
      4294966143,
      64,
      4294966719,
      16383,
      3774873592,
      11,
      458752,
      4294902e3,
      536807423,
      67043839,
      3758096383,
      3959414372,
      3755993023,
      2080374783,
      4294835295,
      4294967103,
      4160749565,
      4087,
      31,
      184024726,
      2862017156,
      1593309078,
      268434431,
      268434414,
      4294901763,
      32768
    ]
  ),
  CharTypes = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    16,
    0,
    0,
    16,
    0,
    0,
    0,
    8,
    0,
    8,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    33,
    33,
    33,
    33,
    33,
    33,
    33,
    33,
    33,
    33,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    39,
    39,
    39,
    39,
    39,
    39,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    0,
    2,
    0,
    0,
    71,
    0,
    39,
    39,
    39,
    39,
    39,
    39,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    0,
    0,
    0,
    0,
    0
  ];
function isIdentifierPart(e) {
  return e <= 127 ? 5 & CharTypes[e] : 1 & (unicodeLookup[0 + (e >>> 5)] >>> e) || 8204 === e || 8205 === e;
}
const errorMessages = {
  104: '%0 source must be string',
  105: 'Only a identifier can be used to indicate alias',
  102: "Cannot export a duplicate name '%0'",
  103: "Exported binding '%0' needs to refer to a top-level declared variable",
  101: 'More than one default clause in switch statement',
  100: '... is not allowed in import()',
  99: 'Invalid object literal key character after generator star',
  96: 'An arrow function can not have a postfix update operator',
  97: 'Block body arrows can not be immediately accessed without a group',
  98: 'Block body arrows can not be immediately invoked without a group',
  95: 'Dot property must be an identifier',
  92: "Illegal 'use strict' directive in function with non-simple parameter list",
  93: 'Octal literals are not allowed in strict mode',
  94: "The identifier 'let' must not be in expression position in strict mode",
  91: 'Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass',
  89: 'Member access on super must be in a method',
  90: 'Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass',
  89: 'Member access on super must be in a method',
  88: 'new.target expression is not allowed here',
  87: '`let` declaration not allowed here and `let` cannot be a regular var name in strict mode',
  82: 'In strict mode code or without web compability enabled, functions can only be declared at top level or inside a block',
  83: 'In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement',
  84: "Class declaration can't appear in single-statement context",
  80: "Undefined label '%0'",
  81: 'Illegal continue statement',
  26: 'Unexpected strict mode reserved word',
  27: 'Unexpected eval or arguments in strict mode',
  28: 'Invalid keyword',
  29: "'A lexical declaration can't define a 'let' binding",
  30: 'Await is only valid in async functions',
  31: "'%0' may not be used as an identifier in this context",
  69: 'Invalid left-hand side in for-%0',
  68: 'Property name __proto__ appears more than once in object literal',
  79: 'Async functions can only be declared at the top level or inside a block',
  0: 'Unexpected token',
  86: 'Unexpected token %0',
  78: "No line break is allowed after '=>'",
  85: 'Illegal break statement',
  76: 'Unary expressions as the left operand of an exponentation expression must be disambiguated with parentheses',
  77: 'Calling delete on expression not allowed in strict mode',
  75: "Expected '=>'",
  21: 'Illegal return statement',
  73: '`=>` is an invalid assignment target',
  74: 'Async arrow can not be followed by new expression',
  72: 'Invalid left-hand side in async arrow',
  71: 'The left-hand side of the arrow can only be destructed through assignment',
  70: 'The binding declaration is not destructible',
  64: 'Pattern can not have a tail',
  56: 'Invalid destructuring assignment target',
  65: 'Can not have a `yield` expression on the left side of a ternary',
  66: 'Invalid increment/decrement operand',
  58: 'Invalid shorthand property initializer',
  62: 'Invalid left-hand side assignment to a destructible right-hand side',
  60: 'Invalid left-hand side in assignment',
  67: 'The rest argument must the be last parameter',
  63: 'Invalid rest argument',
  61: 'Encountered invalid input after spread/rest argument',
  59: 'A computed property name must be followed by a colon or paren',
  57: 'Async methods are a restricted production and cannot have a newline following it',
  55: "Classes may not have a static property named 'prototype'",
  54: 'Duplicate constructor method in class',
  53: 'Class constructor may not be a %0',
  52: 'Invalid key token',
  1: 'Unexpected identifier after numeric literal',
  2: 'Invalid BigInt syntax',
  3: 'Octal escape sequences are not allowed in strict mode',
  4: 'Non-number found after exponent indicator',
  5: 'Unterminated string literal',
  6: 'OptionalChainingNoTemplate',
  11: 'HTML comments are not allowed in modules or without AnnexB support',
  8: 'Numeric separators are not allowed at the end of numeric literals',
  7: 'Only one underscore is allowed as numeric separator',
  9: 'Missing digits',
  10: 'Multiline comment was not closed properly',
  12: 'Unterminated regular expression',
  13: 'Unexpected regular expression flag',
  14: "Duplicate regular expression flag '%0'",
  47: 'Invalid use of `new` keyword on an increment/decrement expression',
  48: "Invalid use of '%0' inside new expression",
  51: 'Cannot use new with import(...)',
  15: 'Escapes \\8 or \\9 are not syntactically valid escapes',
  16: 'Octal escape sequences are not allowed in template strings',
  17: 'Invalid hexadecimal escape sequence',
  18: 'Unicode codepoint must not be greater than 0x10FFFF',
  19: 'Illegal Unicode escape sequence',
  50: 'The %0 keyword can only be used with the module goal',
  20: "Illegal character '%0'",
  22: "Duplicate binding '%0'",
  24: "'%0' has already been declared",
  23: "'%0' shadowed a catch clause binding",
  25: 'Function name may not contain any reserved words or be eval or arguments in strict mode',
  32: '%0 declaration must have a name in this context',
  40: 'Identifier "let" disallowed as left-hand side expression in strict mode',
  34: 'Missing initializer in %0 declaration',
  33: "'for-%0' loop head declarations can not have an initializer",
  35: 'Invalid left-hand side in for-%0 loop: Must have a single binding',
  37: 'Await expression not allowed in formal parameter',
  36: 'Yield expression not allowed in formal parameter',
  38: '%0 functions must have exactly %1 argument%2',
  39: 'Setter function argument must not be a rest parameter',
  41: "The left-hand side of a for-of loop may not start with 'let'",
  42: 'Missing catch or finally after try',
  44: 'Illegal newline after throw',
  43: 'Strict mode code may not include a with statement',
  46: 'Invalid optional chain from new expression',
  49: 'Cannot use "import.meta" outside a module',
  45: 'Coalescing and logical operators used together in the same expression must be disambiguated with parentheses'
};
class ParseError extends SyntaxError {
  constructor(e, t, n, r, ...o) {
    const s = '[' + t + ':' + n + ']: ' + errorMessages[r].replace(/%(\d+)/g, (e, t) => o[t]);
    super(`${s}`), (this.index = e), (this.line = t), (this.column = n), (this.description = s);
  }
}
function report(e, t, ...n) {
  throw new ParseError(e.index, e.lineBase, e.index - e.offset, t, ...n);
}
function reportScopeError(e) {
  throw new ParseError(e.index, e.line, e.column, e.type, e.params);
}
function skipHashBang(e, t) {
  35 === t.charCodeAt(e.index) &&
    33 === t.charCodeAt(e.index + 1) &&
    (e.index = skipSingleLineComment(e, t, e.index + 1));
}
function skipSingleHTMLComment(e, t, n, r) {
  return (2064 & t) > 0 && report(e, 11), skipSingleLineComment(e, n, r++);
}
function skipSingleLineComment(e, t, n) {
  let r = t.charCodeAt(n);
  for (; n < e.length && 0 == (1 & (unicodeLookup[69632 + (r >>> 5)] >>> r)); ) r = t.charCodeAt(++n);
  return n;
}
function skipMultiLineComment(e, t, n) {
  let r = 0,
    o = t.charCodeAt(n++);
  for (; n < e.length; ) {
    if (o < 43) {
      if (42 === o) {
        for (; 42 === o; ) o = t.charCodeAt(n++);
        if (47 === o) return n;
      }
      13 === o && (e.lineBase++, (e.newLine = r = 1), (e.offset = n)),
        10 === o && (0 === r && e.lineBase++, (r = 0), (e.newLine = 1), (e.offset = n));
    } else 8232 == (-2 & o) && ((e.offset = n), (e.newLine = 1), e.lineBase++, (r = 0));
    o = t.charCodeAt(n++);
  }
  report(e, 10);
}
const KeywordDescTable = [
    'end of source',
    'identifier',
    'number',
    'number',
    'string',
    'regular expression',
    'false',
    'true',
    'null',
    'template continuation',
    'template end',
    '=>',
    '(',
    '{',
    '.',
    '...',
    '}',
    ')',
    ';',
    ',',
    '[',
    ']',
    ':',
    '?',
    '??',
    '?.',
    "'",
    '"',
    '</',
    '/>',
    '++',
    '--',
    '=',
    '<<=',
    '>>=',
    '>>>=',
    '**=',
    '+=',
    '-=',
    '*=',
    '/=',
    '%=',
    '^=',
    '|=',
    '&=',
    'typeof',
    'delete',
    'void',
    '!',
    '~',
    '+',
    '-',
    'in',
    'instanceof',
    '*',
    '%',
    '/',
    '**',
    '&&',
    '||',
    '===',
    '!==',
    '==',
    '!=',
    '<=',
    '>=',
    '<',
    '>',
    '<<',
    '>>',
    '>>>',
    '&',
    '|',
    '^',
    'var',
    'let',
    'const',
    'break',
    'case',
    'catch',
    'class',
    'continue',
    'debugger',
    'default',
    'do',
    'else',
    'export',
    'extends',
    'finally',
    'for',
    'function',
    'if',
    'import',
    'new',
    'return',
    'super',
    'switch',
    'this',
    'throw',
    'try',
    'while',
    'with',
    'implements',
    'interface',
    'package',
    'private',
    'protected',
    'public',
    'static',
    'yield',
    'as',
    'async',
    'await',
    'constructor',
    'get',
    'set',
    'from',
    'of',
    'enum',
    'identifier',
    'identifier',
    'whitespace',
    'whitespace',
    'whitespace',
    'number',
    '/',
    'comment'
  ],
  descKeywordTable = Object.create(null, {
    this: { value: 1179745 },
    function: { value: 1179738 },
    if: { value: 131163 },
    return: { value: 131166 },
    var: { value: 1179722 },
    eval: { value: 540082309 },
    arguments: { value: 540082310 },
    else: { value: 131157 },
    for: { value: 131161 },
    new: { value: 1179741 },
    in: { value: 139624500 },
    typeof: { value: 1179693 },
    while: { value: 131172 },
    case: { value: 131150 },
    break: { value: 131149 },
    try: { value: 131171 },
    catch: { value: 131151 },
    delete: { value: 1179694 },
    throw: { value: 1179746 },
    switch: { value: 1179744 },
    continue: { value: 131153 },
    default: { value: 131155 },
    instanceof: { value: 135432245 },
    do: { value: 131156 },
    enum: { value: 131190 },
    void: { value: 1179695 },
    finally: { value: 131160 },
    async: { value: 2162799 },
    await: { value: 3211376 },
    class: { value: 1179728 },
    const: { value: 1179724 },
    constructor: { value: 65649 },
    debugger: { value: 131154 },
    export: { value: 131158 },
    extends: { value: 131159 },
    false: { value: 1179654 },
    from: { value: 65652 },
    get: { value: 65650 },
    implements: { value: 262246 },
    import: { value: 1179740 },
    interface: { value: 262247 },
    let: { value: 3473483 },
    null: { value: 1179656 },
    of: { value: 4259957 },
    package: { value: 262248 },
    private: { value: 262249 },
    protected: { value: 262250 },
    public: { value: 262251 },
    set: { value: 65651 },
    static: { value: 262252 },
    super: { value: 1179743 },
    true: { value: 1179655 },
    with: { value: 131173 },
    yield: { value: 3473517 },
    as: { value: 65646 }
  });
function scanIdentifier(e, t, n, r) {
  for (; 5 & CharTypes[r]; ) r = n.charCodeAt(++e.index);
  const o = n.slice(e.start, e.index);
  return r > 90 ? scanIdentifierSlowPath(e, t, n, o, 0) : ((e.tokenValue = o), 3211265);
}
function scanIdentifierOrKeyword(e, t, n, r) {
  for (; 5 & CharTypes[r]; ) r = n.charCodeAt(++e.index);
  const o = n.slice(e.start, e.index);
  return r > 90 ? scanIdentifierSlowPath(e, t, n, o, 1) : ((e.tokenValue = o), descKeywordTable[o] || 3211265);
}
function scanIdentifierSlowPath(e, t, n, r, o) {
  let s = e.index,
    a = 0,
    i = n.charCodeAt(e.index),
    p = null;
  for (; e.index < e.length; ) {
    if (92 === i)
      (r += n.slice(s, e.index)),
        (a = 1),
        (p = scanUnicodeEscape(e, n)),
        isIdentifierPart(p) || report(e, 19),
        (o = 1),
        (r += fromCodePoint(p)),
        (s = e.index);
    else {
      if (55296 == (64512 & i)) {
        const t = n.charCodeAt(e.index + 1);
        56320 == (64512 & t) &&
          ((i = 65536 + ((1023 & i) << 10) + (1023 & t)),
          0 == (1 & (unicodeLookup[0 + (i >>> 5)] >>> i)) && report(e, 0),
          e.index++);
      }
      if (!isIdentifierPart(i)) break;
      e.index++;
    }
    i = n.charCodeAt(e.index);
  }
  const l = (r += n.slice(s, e.index)).length;
  if (((e.tokenValue = r), o && l >= 2 && l <= 11)) {
    const n = descKeywordTable[e.tokenValue];
    return void 0 === n
      ? 3211265
      : 0 === a
      ? n
      : 262144 == (262144 & n)
      ? 2162808
      : 1024 & t && (3473483 === n || 262252 === n)
      ? 2162808
      : 2162807;
  }
  return 3211265;
}
function scanUnicodeEscape(e, t) {
  117 !== t.charCodeAt(e.index + 1) && report(e, 19);
  let n = 0,
    r = t.charCodeAt((e.index += 2));
  if (123 === r) {
    let o = toHex(t.charCodeAt(++e.index));
    for (o < 0 && report(e, 17); o >= 0; )
      (n = (n << 4) | o), n > 1114111 && report(e, 18), (o = toHex((r = t.charCodeAt(++e.index))));
    return (n < 0 || 125 !== r) && report(e, 17), e.index++, n;
  }
  let o = 0;
  for (o = 0; o < 4; o++) {
    const r = toHex(t.charCodeAt(e.index));
    r < 0 && report(e, 17), (n = (n << 4) | r), e.index++;
  }
  return n;
}
function scanUnicodeEscapeIdStart(e, t, n) {
  const r = scanUnicodeEscape(e, n);
  if (isIdentifierPart(r)) return scanIdentifierSlowPath(e, t, n, fromCodePoint(r), 1);
  e.index++, report(e, 19);
}
function scanStringLiteral(e, t, n, r) {
  let o = readNext(e),
    s = '',
    a = e.index;
  for (; o !== r; )
    if (o <= 126)
      if (92 === o) {
        (s += n.slice(a, e.index)), (o = readNext(e));
        const r = scanEscapeSequence(e, t, n, o);
        r <= 0 && handleStringError(e, r, 0),
          (s += fromCodePoint(r)),
          (a = e.index),
          (e.isUnicodeEscape = 1),
          (o = n.charCodeAt(e.index));
      } else (o = readNext(e)), 16 == (16 & CharTypes[o]) && report(e, 5);
    else (o = readNext(e)), 8232 == (-2 & o) && (e.index++, (e.offset = e.index), e.lineBase++);
  return (s += n.slice(a, e.index)), e.index++, (e.tokenValue = s), 1572868;
}
function scanEscapeSequence(e, t, n, r) {
  let o = n.charCodeAt(++e.index);
  switch (r) {
    case 98:
      return 8;
    case 102:
      return 12;
    case 114:
      return 13;
    case 110:
      return 10;
    case 116:
      return 9;
    case 118:
      return 11;
    case 117: {
      let t = 0;
      if (123 === o) {
        let r = toHex(n.charCodeAt(++e.index));
        if (r < 0) return -4;
        for (; r >= 0; ) {
          if (((t = (t << 4) | r), t > 1114111)) return -5;
          (o = n.charCodeAt(++e.index)), (r = toHex(o));
        }
        return t < 0 || 125 !== o ? -4 : (e.index++, t);
      }
      let r = 0,
        s = null;
      for (r = 0; r < 4; r++) {
        if (((s = toHex(n.charCodeAt(e.index++))), s < 0)) return -4;
        t = (t << 4) | s;
      }
      return t;
    }
    case 120: {
      const t = toHex(o);
      if (t < 0) return -4;
      const r = toHex(n.charCodeAt(++e.index));
      return r < 0 ? -4 : (e.index++, (t << 4) | r);
    }
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55: {
      if (1040 & t) return 48 === r && (o < 48 || o > 57) ? r - 48 : -2;
      const s = r - 48;
      if (o >= 48 && o <= 55) {
        let t = e.index;
        const o = n.charCodeAt(t) - 48;
        if (r >= 48 && r <= 51) {
          const r = n.charCodeAt(t + 1);
          if (r >= 48 && r <= 55) return (e.index = t += 2), 64 * s + 8 * o + r - 48;
        }
        return (e.index = t + 1), (e.flags |= 128), 8 * s + o;
      }
      return s;
    }
    case 56:
    case 57:
      return -3;
    case 13:
      const s = e.index;
      s < e.length && 10 === n.charCodeAt(s) && (e.index = s + 1);
    case 10:
      return (e.offset = e.index), e.lineBase++, -1;
    default:
      return r;
  }
}
function handleStringError(e, t, n) {
  switch (t) {
    case -1:
      return;
    case -2:
      report(e, n ? 16 : 3);
    case -3:
      report(e, 15);
    case -4:
      report(e, 17);
    case -5:
      report(e, 18);
  }
}
function scanRegularExpression(e, t, n, r) {
  const o = r;
  let s = 0;
  for (;;) {
    const t = n.charCodeAt(r);
    if ((r++, 1 & s)) s &= -2;
    else if (t <= 94)
      if (47 === t) {
        if (!s) break;
      } else
        92 === t ? (s |= 1) : 91 === t ? (s |= 2) : 93 === t ? (s &= 1) : 16 == (16 & CharTypes[t]) && report(e, 12);
    else 8232 == (-2 & t) && report(e, 12);
    r >= e.length && report(e, 12);
  }
  const a = r - 1;
  let i = 0;
  const p = r;
  let l = n.charCodeAt(r);
  for (; isIdentifierPart(l); ) {
    switch (l) {
      case 103:
        1 & i && report(e, 14, 'g'), (i |= 1);
        break;
      case 105:
        2 & i && report(e, 14, 'i'), (i |= 2);
        break;
      case 109:
        4 & i && report(e, 14, 'm'), (i |= 4);
        break;
      case 117:
        8 & i && report(e, 14, 'g'), (i |= 8);
        break;
      case 121:
        16 & i && report(e, 14, 'y'), (i |= 16);
        break;
      case 115:
        32 & i && report(e, 14, 's'), (i |= 32);
        break;
      default:
        report(e, 13);
    }
    r++, (l = n.charCodeAt(r));
  }
  const c = n.slice(p, r),
    d = n.slice(o, a);
  return (
    (e.tokenRegExp = { pattern: d, flags: c }),
    (e.index = r),
    8 & t && (e.tokenRaw = n.slice(e.start, r)),
    (e.tokenValue = validate(e, d, c)),
    1048581
  );
}
function validate(e, t, n) {
  try {
    RegExp(t);
  } catch (t) {
    report(e, 0);
  }
  try {
    return new RegExp(t, n);
  } catch (e) {
    return null;
  }
}
function scanTemplate(e, t, n) {
  const { index: r } = e;
  let o = '',
    s = 1048586,
    a = readNext(e);
  for (; 96 !== a; ) {
    if (36 === a) {
      if (123 === n.charCodeAt(e.index + 1)) {
        e.index++, (s = 1048585);
        break;
      }
      o += '$';
    } else if (a < 93)
      if (92 === a)
        if (((a = readNext(e)), a >= 125)) o += fromCodePoint(a);
        else {
          const r = scanEscapeSequence(e, 1024 | t, n, a);
          if (r >= 0) (o += fromCodePoint(r)), e.index--;
          else {
            if (-1 !== r && 65536 & t) {
              (o = null), (a = scanBadTemplate(e, t, n)), a < 0 && ((a = -a), (s = 1048585));
              break;
            }
            handleStringError(e, r, 1);
          }
          a = n.charCodeAt(e.index);
        }
      else
        16 == (16 & CharTypes[a]) &&
          (13 === a &&
            e.index < e.length &&
            10 === n.charCodeAt(e.index) &&
            ((o += fromCodePoint(a)), (a = n.charCodeAt(e.index)), e.index++, e.lineBase++),
          (e.offset = e.index),
          e.lineBase++),
          (o += fromCodePoint(a));
    else (8232 ^ a) <= 1 && ((e.offset = e.index), e.lineBase++), (o += fromCodePoint(a));
    a = readNext(e);
  }
  return e.index++, (e.tokenValue = o), (e.tokenRaw = n.slice(r + 1, e.index - (1048586 === s ? 1 : 2))), s;
}
function scanBadTemplate(e, t, n) {
  let r = n.charCodeAt(e.index);
  for (; 96 !== r; ) {
    if (36 === r) {
      const t = e.index + 1;
      if (t < n.length && 123 === n.charCodeAt(t)) return (e.index = t), -r;
    }
    r = readNext(e);
  }
  return r;
}
function scanTemplateTail(e, t) {
  return e.index >= e.length && report(e, 0), e.index--, scanTemplate(e, t, e.source);
}
const firstCharKinds = [
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    123,
    124,
    123,
    123,
    122,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    123,
    1048624,
    1572868,
    121,
    3211265,
    135314231,
    135292487,
    1572868,
    1048588,
    17,
    135314230,
    135309874,
    19,
    135309875,
    14,
    135314232,
    125,
    1572866,
    1572866,
    1572866,
    1572866,
    1572866,
    1572866,
    1572866,
    1572866,
    1572866,
    22,
    16777234,
    135301186,
    67108896,
    135301187,
    23,
    121,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    3211265,
    34603028,
    2162807,
    21,
    135288137,
    3211265,
    1048586,
    132,
    132,
    132,
    132,
    132,
    132,
    132,
    3211265,
    132,
    3211265,
    132,
    132,
    132,
    132,
    132,
    132,
    3211265,
    132,
    132,
    132,
    132,
    132,
    132,
    3211265,
    132,
    132,
    34603021,
    135283784,
    16777232,
    1048625,
    121
  ],
  CharKinds = [
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    1572866,
    1572866,
    1572866,
    1572866,
    1572866,
    1572866,
    1572866,
    1572866,
    1572866,
    1572866,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    128,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    130,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    129,
    121,
    121,
    121,
    121,
    121,
    121,
    131,
    121,
    121,
    128,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    130,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    121,
    129,
    121,
    121,
    121,
    121,
    121,
    121,
    121
  ];
function readNext(e) {
  return e.index++, e.index >= e.length && report(e, 5), e.source.charCodeAt(e.index);
}
function toHex(e) {
  return (e -= 48) <= 9 ? e : (e = (32 | e) - 49) <= 5 ? e + 10 : -1;
}
function fromCodePoint(e) {
  return e <= 65535 ? String.fromCharCode(e) : String.fromCharCode(e >>> 10) + String.fromCharCode(1023 & e);
}
function scanNumber(e, t, n, r) {
  let o = 9,
    s = 0;
  if (0 === r) {
    for (; n <= 57 && n >= 48 && o >= 0; ) (s = 10 * s + (n - 48)), (n = t.charCodeAt(++e.index)), --o;
    if (o >= 0 && 46 !== n && 0 == (3 & CharTypes[n])) return (e.tokenValue = s), 1572866;
  }
  for (; n <= 57 && n >= 48; ) n = t.charCodeAt(++e.index);
  if (46 === n)
    for (95 === (n = t.charCodeAt(++e.index)) && report(e, 7); n >= 48 && n <= 57; ) n = t.charCodeAt(++e.index);
  return 110 === n && 0 === r
    ? scanBigInt(e, t)
    : (101 == (32 | n) && (n = scanSignedInteger(e, t)),
      95 === n
        ? skipNumericSeparator(e, t, n)
        : (3 & CharTypes[n] && report(e, 1), (e.tokenValue = parseFloat(t.slice(e.start, e.index))), 1572866));
}
function scanSignedInteger(e, t) {
  let n = t.charCodeAt(++e.index);
  (45 !== n && 43 !== n) || (n = t.charCodeAt(++e.index));
  let r = 0;
  for (; n <= 57 && n >= 48; ) (n = t.charCodeAt(++e.index)), r++;
  return 0 === r && report(e, 4), n;
}
function skipNumericSeparator(e, t, n) {
  let r = e.start,
    o = scanDecimalDigitsOrSeparator(e, t, n, r);
  return (
    (r = e.index),
    46 === (n = t.charCodeAt(r)) &&
      (95 === (n = t.charCodeAt(++e.index)) && report(e, 4),
      (o += scanDecimalDigitsOrSeparator(e, t, n, r)),
      (r = e.index),
      (n = t.charCodeAt(r))),
    101 == (32 | n) &&
      ((45 !== (n = t.charCodeAt(++e.index)) && 43 !== n) || (n = t.charCodeAt(++e.index)),
      (1 & CharTypes[n]) < 1 && report(e, 4),
      (o += t.substring(r, e.index) + scanDecimalDigitsOrSeparator(e, t, n, e.index))),
    (e.tokenValue = parseFloat(o)),
    1572866
  );
}
function scanDecimalDigitsOrSeparator(e, t, n, r) {
  let o = 0,
    s = '';
  for (; (n <= 57 && n >= 48) || 95 === n; )
    95 !== n
      ? ((o = 0), (n = t.charCodeAt(++e.index)))
      : (95 === t.charCodeAt(e.index + 1) && report(e, 7),
        (s += t.substring(r, e.index)),
        (n = t.charCodeAt(++e.index)),
        (o = 1),
        (r = e.index));
  return 1 === o && report(e, 8), s + t.substring(r, e.index);
}
function scanNumberAfterDecimalPoint(e, t, n) {
  95 === n && report(e, 7);
  let r = 0;
  for (; n >= 48 && n <= 57; ) n = t.charCodeAt(++e.index);
  return (
    101 == (32 | n) && (n = scanSignedInteger(e, t)),
    95 === n
      ? skipNumericSeparator(e, t, n)
      : (3 & CharTypes[n] && report(e, 1), (r = t.slice(e.start, e.index)), (e.tokenValue = parseFloat(r)), 1572866)
  );
}
function scanImplicitOctalDigits(e, t, n, r) {
  1024 & t && report(e, 3), (e.flags |= 128);
  let o = 0;
  for (; r >= 48 && r <= 57; ) {
    if (r >= 56) return scanNumber(e, n, r, 1);
    (o = 8 * o + (r - 48)), (r = n.charCodeAt(++e.index));
  }
  return 110 === r && report(e, 2), 3 & CharTypes[r] && report(e, 1), (e.tokenValue = o), 1572866;
}
function scanOctalDigits(e, t) {
  let n = 0,
    r = t.charCodeAt(++e.index),
    o = 9;
  const s = e.index;
  for (; r >= 48 && r <= 55 && o >= 0; ) (n = (n << 3) | (r - 48)), (r = t.charCodeAt(++e.index)), --o;
  if ((s === e.index && report(e, 9), o >= 0 && 0 == (3 & CharTypes[r]))) return (e.tokenValue = n), 1572866;
  let a = 1;
  for (; (r >= 48 && r <= 55) || 95 === r; )
    95 !== r
      ? ((a = 1), (n = 8 * n + (r - 48)), (r = t.charCodeAt(++e.index)))
      : (0 === a && report(e, 7), (a = 0), (r = t.charCodeAt(++e.index)));
  return (
    0 === a && report(e, 8),
    110 === r ? scanBigInt(e, t) : (3 & CharTypes[r] && report(e, 1), (e.tokenValue = n), 1572866)
  );
}
function scanHexDigits(e, t) {
  let n = 0,
    r = t.charCodeAt(++e.index);
  const o = e.index;
  let s = 7;
  for (; 32 == (32 & CharTypes[r]) && s >= 0; ) (n = (n << 4) | toHex(r)), (r = t.charCodeAt(++e.index)), --s;
  if ((o === e.index && report(e, 9), s >= 0 && 0 == (3 & CharTypes[r]))) return (e.tokenValue = n), 1572866;
  let a = 1;
  for (; 96 & CharTypes[r]; )
    95 !== r
      ? ((a = 1), (n = 16 * n + toHex(r)), (r = t.charCodeAt(++e.index)))
      : (a || report(e, 7), (a = 0), (r = t.charCodeAt(++e.index)));
  return (
    0 === a && report(e, 8),
    110 === r ? scanBigInt(e, t) : (3 & CharTypes[r] && report(e, 1), (e.tokenValue = n), 1572866)
  );
}
function scanBinaryDigits(e, t) {
  let n = 0,
    r = 31,
    o = t.charCodeAt(++e.index);
  const s = e.index;
  for (; o >= 48 && o <= 49 && r >= 0; ) (n = o - 48 + (n << 1)), --r, (o = t.charCodeAt(++e.index));
  if ((s === e.index && report(e, 9), r >= 0 && 0 == (3 & CharTypes[o]))) return (e.tokenValue = n), 1572866;
  let a = 1;
  for (; (o >= 48 && o <= 49) || 95 === o; )
    95 !== o
      ? ((a = 1), (n = 2 * n + (o - 48)), (o = t.charCodeAt(++e.index)))
      : (0 === a && report(e, 7), (a = 0), (o = t.charCodeAt(++e.index)));
  return (
    0 === a && report(e, 8),
    110 === o ? scanBigInt(e, t) : (3 & CharTypes[o] && report(e, 1), (e.tokenValue = n), 1572866)
  );
}
function scanBigInt(e, t) {
  const n = t.charCodeAt(++e.index);
  return 3 & CharTypes[n] && report(e, 1), 1572867;
}
function scan(e, t, n, r, o, s, a, i, p) {
  let l;
  for (; e.index < o; ) {
    if (((l = n.charCodeAt(e.index)), (e.line = e.lineBase), (e.column = (e.start = e.index) - e.offset), l > 126)) {
      if (8232 == (-2 & l)) {
        (e.offset = ++e.index), (e.newLine = 1), e.lineBase++, (a = 0);
        continue;
      }
      if (1 & (unicodeLookup[104448 + (l >>> 5)] >>> l)) {
        e.index++;
        continue;
      }
      if (1 & (unicodeLookup[34816 + (l >>> 5)] >>> l) || 55296 == (64512 & l))
        return scanIdentifierSlowPath(e, t, n, '', 0);
      report(e, 20, fromCodePoint(l));
    }
    switch ((s = firstCharKinds[l])) {
      case 16777232:
      case 34603021:
      case 19:
      case 22:
      case 1048625:
      case 1048588:
      case 17:
      case 16777234:
      case 34603028:
      case 21:
        return e.index++, s;
      case 123:
        e.index++;
        break;
      case 3211265:
        return scanIdentifier(e, t, n, l);
      case 132:
        return scanIdentifierOrKeyword(e, t, n, l);
      case 1572866:
        return scanNumber(e, n, l, 0);
      case 1572868:
        return scanStringLiteral(e, t, n, l);
      case 1048586:
        return scanTemplate(e, t, n);
      case 2162807:
        return scanUnicodeEscapeIdStart(e, t, n);
      case 125:
        if (e.index + 1 < o)
          switch (((l = n.charCodeAt(++e.index)), CharKinds[l])) {
            case 129:
              return scanHexDigits(e, n);
            case 128:
              return scanBinaryDigits(e, n);
            case 130:
              return scanOctalDigits(e, n);
            case 1572866:
            case 131:
              return scanImplicitOctalDigits(e, t, n, l);
          }
        return scanNumber(e, n, l, 0);
      case 122:
        (e.offset = ++e.index), e.lineBase++, (e.newLine = a = 1);
        break;
      case 124:
        (e.offset = ++e.index), (e.newLine = 1), 0 === a && e.lineBase++, (a = 0);
        break;
      case 14:
        return (
          (l = n.charCodeAt(++e.index)),
          l >= 48 && l <= 57
            ? scanNumberAfterDecimalPoint(e, n, l)
            : 46 === l && 46 === n.charCodeAt(e.index + 1)
            ? ((e.index += 2), 15)
            : 14
        );
      case 135314232:
        if (((r = ++e.index), (l = n.charCodeAt(r)), 47 === l)) {
          e.index = skipSingleLineComment(e, n, r);
          continue;
        }
        if (42 === l) {
          e.index = skipMultiLineComment(e, n, ++r);
          continue;
        }
        return 1 === p ? scanRegularExpression(e, t, n, r) : 61 === l ? (e.index++, 68157480) : 135314232;
      case 67108896:
        return (
          (l = n.charCodeAt(++e.index)),
          61 === l
            ? 61 !== n.charCodeAt(++e.index)
              ? 135296830
              : (e.index++, 135296828)
            : 62 !== l
            ? 67108896
            : (e.index++, 11)
        );
      case 23:
        return (
          (l = n.charCodeAt(++e.index)),
          46 === l
            ? ((l = n.charCodeAt(e.index + 1)), l >= 48 && l <= 57 ? 23 : (e.index++, 25))
            : 63 === l
            ? (e.index++, 1209012504)
            : 23
        );
      case 135301186:
        if (((l = n.charCodeAt(++e.index)), 60 === l))
          return 61 === n.charCodeAt(++e.index) ? (e.index++, 67108897) : 135305540;
        if (61 === l) return (e.index += 1), 135296832;
        if (33 === l && e.index < o && 45 === n.charCodeAt(e.index + 2) && 45 === n.charCodeAt(e.index + 1)) {
          e.index = skipSingleHTMLComment(e, t, n, e.index);
          continue;
        }
        return 135301186;
      case 135309875:
        if (((l = n.charCodeAt(++e.index)), 45 === l)) {
          if (62 === n.charCodeAt(e.index + 1) && (i || e.newLine)) {
            e.index = skipSingleHTMLComment(e, t, n, e.index);
            continue;
          }
          return e.index++, 269484063;
        }
        return 61 === l ? (e.index++, 67108902) : 135309875;
      case 1048624:
        return 61 === n.charCodeAt(e.index + 1)
          ? ((r = e.index + 1), 61 === n.charCodeAt(r + 1) ? ((e.index += 3), 135296829) : ((e.index += 2), 135296831))
          : (e.index++, 1048624);
      case 135314231:
        return 61 !== n.charCodeAt(++e.index) ? 135314231 : (e.index++, 67108905);
      case 135314230:
        return (
          (l = n.charCodeAt(++e.index)),
          61 === l
            ? (e.index++, 67108903)
            : 42 !== l
            ? 135314230
            : 61 !== n.charCodeAt(++e.index)
            ? 135318585
            : (e.index++, 67108900)
        );
      case 135288137:
        return 61 !== n.charCodeAt(++e.index) ? 135288137 : (e.index++, 67108906);
      case 135309874:
        return (
          (l = n.charCodeAt(++e.index)),
          43 === l ? (e.index++, 269484062) : 61 === l ? (e.index++, 67108901) : 135309874
        );
      case 135283784:
        return (
          (l = n.charCodeAt(++e.index)),
          124 === l ? (e.index++, 143663675) : 61 === l ? (e.index++, 67108907) : 135283784
        );
      case 135301187:
        return (
          (l = n.charCodeAt(++e.index)),
          61 === l
            ? (e.index++, 135296833)
            : 62 !== l
            ? 135301187
            : ((l = n.charCodeAt(++e.index)),
              62 === l
                ? 61 !== n.charCodeAt(++e.index)
                  ? 135305542
                  : (e.index++, 67108899)
                : 61 === l
                ? (e.index++, 67108898)
                : 135305541)
        );
      case 135292487:
        return (
          (l = n.charCodeAt(++e.index)),
          38 === l ? (e.index++, 143668026) : 61 === l ? (e.index++, 67108908) : 135292487
        );
      default:
        report(e, 20, fromCodePoint(l));
    }
  }
  return 16777216;
}
function nextToken(e, t, n) {
  e.newLine = 0;
  const { source: r, length: o, index: s, offset: a } = e;
  (e.lastColumn = (e.endIndex = s) - a),
    (e.prevLinebase = e.lineBase),
    (e.token = scan(e, t, r, s, o, 16777216, 0, 0 === s, n));
}
function recordScopeError(e, t, ...n) {
  return { type: t, params: n, index: e.index, line: e.line, column: e.column };
}
function addVarOrBlock(e, t, n, r, o, s) {
  2 & o ? addVarName(e, t, n, r, o) : addBlockName(e, t, n, r, o, s), 64 & s && declareUnboundVariable(e, r);
}
function declareUnboundVariable(e, t) {
  void 0 !== e.exportedNames &&
    '' !== t &&
    (e.exportedNames['#' + t] && report(e, 102, t), (e.exportedNames['#' + t] = 1));
}
function addBindingToExports(e, t) {
  void 0 !== e.exportedBindings && '' !== t && (e.exportedBindings['#' + t] = 1);
}
function addVarName(e, t, n, r, o) {
  if (void 0 === n) return;
  let s,
    a = n;
  for (; a && 0 == (128 & a.type); )
    (s = a['#' + r]),
      (244 & s) > 0 &&
        ((0 == (1040 & t) && (128 & o) > 0 && (6 & s) > 0) || ((128 & s) > 0 && (6 & o) > 0) || report(e, 22, r)),
      (1 & s) > 0 && (1 & o) > 0 && a === n && (a.scopeError = recordScopeError(e, 22, r)),
      (768 & s) > 0 && ((1040 & t) > 0 || 0 == (512 & s)) && report(e, 22, r),
      (a['#' + r] = o),
      (a = a.parent);
}
function addBlockName(e, t, n, r, o, s) {
  if (void 0 === n) return;
  const a = n['#' + r];
  a &&
    0 == (8 & a) &&
    ((1 & o) > 0
      ? (n.scopeError = recordScopeError(e, 22, r))
      : ((16 & t) > 0 || 0 == (4 & a) || 0 == (2 & s)) && report(e, 22, r));
  const i = n.parent;
  (64 & n.type) > 0 && i['#' + r] && 0 == (8 & i['#' + r]) && report(e, 22, r),
    (32 & n.type) > 0 && (768 & i['#' + r]) > 0 && report(e, 23, r),
    (n['#' + r] = o);
}
function expectSemicolon(e, t) {
  16777234 !== e.token
    ? 1 === e.newLine || (16777216 & e.token) > 0 || report(e, 86, KeywordDescTable[255 & e.token])
    : nextToken(e, t, 1);
}
function consumeOpt(e, t, n, r) {
  return e.token !== n ? 0 : (nextToken(e, t, r), 1);
}
function setLoc(e, t, n) {
  return { start: { line: t, column: n }, end: { line: e.prevLinebase, column: e.lastColumn } };
}
function reinterpretToPattern(e, t) {
  switch (t.type) {
    case 'ArrayExpression':
      t.type = 'ArrayPattern';
      const n = t.elements;
      for (let t = 0, r = n.length; t < r; ++t) {
        const r = n[t];
        r && reinterpretToPattern(e, r);
      }
      return;
    case 'ObjectExpression':
      t.type = 'ObjectPattern';
      const r = t.properties;
      for (let t = 0, n = r.length; t < n; ++t) reinterpretToPattern(e, r[t]);
      return;
    case 'AssignmentExpression':
      return (
        (t.type = 'AssignmentPattern'),
        '=' !== t.operator && report(e, 0),
        delete t.operator,
        void reinterpretToPattern(e, t.left)
      );
    case 'Property':
      return void reinterpretToPattern(e, t.value);
    case 'SpreadElement':
      (t.type = 'RestElement'), reinterpretToPattern(e, t.argument);
  }
}
function parseStatementWithLabelSet(e, t, n, r) {
  return null === r ? (r = [t]) : r.push(t), isIterationStatement(e) && (n.iterationLabels = r), r;
}
function isIterationStatement(e) {
  return 131161 === e || 131172 === e || 131156 === e;
}
function addLabel(e, t, n, r) {
  let o = n;
  for (; o; ) o['#' + t] && report(e, 0), (o = o.parentLabels);
  return ((n = { parentLabels: n, iterationLabels: null })['#' + t] = !0), null === r ? (r = [t]) : r.push(t), n;
}
function isValidBreakLabel(e, t, n) {
  if ((null === t && report(e, 0), t['#' + n])) return 1;
  for (; (t = t.parentLabels); ) if (t['#' + n]) return 1;
  return 0;
}
function isExactlyStrictDirective(e, t, n, r) {
  return t - n == 12 && 'use strict' === r && 16777216 == (16777216 & e.token);
}
function consume(e, t, n, r) {
  e.token !== n && report(e, 0), nextToken(e, t, r);
}
function validateFunctionName(e, t, n) {
  1024 & t && ((262144 & n) > 0 && report(e, 26), 537919488 == (537919488 & n) && report(e, 26)),
    (131072 & n) > 0 && report(e, 28),
    4196352 & t && 3211376 === n && report(e, 30),
    2098176 & t && 3473517 === n && report(e, 31, 'yield');
}
function isValidIdentifier(e, t) {
  return 2098176 & e
    ? !(2048 & e && 3211376 === t) && !(2097152 & e && 3473517 === t) && (2162688 & t) > 0
    : (2162688 & t) > 0 || (262144 & t) > 0;
}
function isStrictReservedWord(e, t, n, r) {
  return (
    3211376 === n && (4196352 & t && report(e, 30), (e.flags |= 1 === r ? 2048 : 0)),
    537919488 == (537919488 & n) && report(e, 27),
    (131072 & n) > 0 || (262144 & n) > 0 || 2162808 == n
  );
}
function validateIdentifier(e, t, n, r) {
  1024 & t && (262144 & r) > 0 && report(e, 26),
    (131072 & r) > 0 && report(e, 28),
    48 & n && 3473483 === r && report(e, 29),
    4196352 & t && 3211376 === r && report(e, 30),
    2098176 & t && 3473517 === r && report(e, 31, 'yield');
}
function parseAssignmentExpression(e, t, n, r, o, s, a, i) {
  const p = e.token;
  if (67108864 == (67108864 & p)) {
    return (
      0 === e.assignable && report(e, 60), parseAssignmentOrPattern(e, t, n, r, o, KeywordDescTable[255 & p], s, a, i)
    );
  }
  return (
    (135266304 & p) > 0 && (o = parseBinaryExpression(e, t, r, 4, p, s, a, i, o)),
    23 === e.token ? parseConditionalExpression(e, t, o, s, a, i) : o
  );
}
function parseExpression(e, t, n) {
  const { start: r, line: o, column: s } = e;
  let a = parsePrimaryExpression(e, t, 0, 0, 1, 1, n, r, o, s);
  return (a = parseMemberExpression(e, t, a, 0, 0, n, r, o, s)), parseAssignmentExpression(e, t, 0, n, a, r, o, s);
}
function parseExpressions(e, t, n) {
  const { start: r, line: o, column: s } = e,
    a = parseExpression(e, 8192 ^ (8192 | t), n);
  return 19 === e.token ? parseSequenceExpression(e, t, a, r, o, s) : a;
}
function parseSequenceExpression(e, t, n, r, o, s) {
  nextToken(e, t, 1);
  const a = [n, parseExpression(e, t, 0)];
  for (; 19 === e.token; ) nextToken(e, t, 1), a.push(parseExpression(e, t, 0));
  return 2 & t
    ? { type: 'SequenceExpression', expressions: a, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
    : { type: 'SequenceExpression', expressions: a };
}
function parseConditionalExpression(e, t, n, r, o, s) {
  nextToken(e, t, 1);
  const a = parseExpression(e, 8192 ^ (8192 | t), 0);
  consume(e, t, 22, 1);
  const i = parseExpression(e, t, 0);
  return (
    (e.assignable = 0),
    2 & t
      ? {
          type: 'ConditionalExpression',
          test: n,
          consequent: a,
          alternate: i,
          start: r,
          end: e.endIndex,
          loc: setLoc(e, o, s)
        }
      : { type: 'ConditionalExpression', test: n, consequent: a, alternate: i }
  );
}
function parseBinaryExpression(e, t, n, r, o, s, a, i, p) {
  let l, c, d;
  const u = 8192 & t ? 3840 : 61440;
  for (; (135266304 & o) > 0; ) {
    if (((l = e.token), (l & u) + ((135318585 === l) << 8) <= r)) return p;
    ((8388608 & o) | (1073741824 & l) | (8388608 & l) | (1073741824 & o)) > 1073741824 && report(e, 45),
      nextToken(e, t, 1),
      (d = KeywordDescTable[255 & l]),
      (c = parseBinaryExpression(
        e,
        t,
        n,
        l & u,
        l,
        e.start,
        e.line,
        e.column,
        parseLeftHandSideExpression(e, t, n, 1, 0)
      )),
      (e.assignable = 0),
      (p =
        2 & t
          ? {
              type: 1082130432 & l ? 'LogicalExpression' : 'BinaryExpression',
              left: p,
              right: c,
              operator: d,
              start: s,
              end: e.endIndex,
              loc: setLoc(e, a, i)
            }
          : { type: 1082130432 & l ? 'LogicalExpression' : 'BinaryExpression', left: p, right: c, operator: d });
  }
  return p;
}
function parseMemberExpression(e, t, n, r, o, s, a, i, p) {
  if (269484032 == (269484032 & e.token)) return 0 === e.newLine ? parseUpdateExpression(e, t, n, a, i, p) : n;
  switch (e.token) {
    case 14: {
      nextToken(e, t, 0), (e.assignable = 1), 0 == (2555904 & e.token) && report(e, 95);
      const l = parseIdentifier(e, t);
      return parseMemberExpression(
        e,
        t,
        2 & t
          ? {
              type: 'MemberExpression',
              object: n,
              computed: !1,
              property: l,
              optional: 1 === r,
              shortCircuited: 1 === o,
              start: a,
              end: e.endIndex,
              loc: setLoc(e, i, p)
            }
          : {
              type: 'MemberExpression',
              object: n,
              computed: !1,
              property: l,
              optional: 1 === r,
              shortCircuited: 1 === o
            },
        0,
        r,
        s,
        a,
        i,
        p
      );
    }
    case 34603028: {
      nextToken(e, t, 1);
      const l = parseExpressions(e, 8192 ^ (8192 | t), s);
      return (
        consume(e, t, 21, 0),
        (e.assignable = 1),
        parseMemberExpression(
          e,
          t,
          2 & t
            ? {
                type: 'MemberExpression',
                object: n,
                computed: !0,
                property: l,
                optional: 1 === r,
                shortCircuited: 1 === o,
                start: a,
                end: e.endIndex,
                loc: setLoc(e, i, p)
              }
            : {
                type: 'MemberExpression',
                object: n,
                computed: !0,
                property: l,
                optional: 1 === r,
                shortCircuited: 1 === o
              },
          0,
          o,
          s,
          a,
          i,
          p
        )
      );
    }
    case 1048588: {
      const l = parseArguments(e, t, s);
      return (
        (e.assignable = 0),
        parseMemberExpression(
          e,
          t,
          2 & t
            ? {
                type: 'CallExpression',
                callee: n,
                arguments: l,
                optional: 1 === r,
                shortCircuited: 1 === o,
                start: a,
                end: e.endIndex,
                loc: setLoc(e, i, p)
              }
            : { type: 'CallExpression', callee: n, arguments: l, optional: 1 === r, shortCircuited: 1 === o },
          0,
          r,
          s,
          a,
          i,
          p
        )
      );
    }
    case 1048586:
    case 1048585: {
      1 === o && report(e, 6), (e.assignable = 0);
      const l = 1048585 === e.token ? parseTemplate(e, 65536 | t, a, i, p) : parseTemplateLiteral(e, t);
      return parseMemberExpression(
        e,
        t,
        2 & t
          ? { type: 'TaggedTemplateExpression', tag: n, quasi: l, start: a, end: e.endIndex, loc: setLoc(e, i, p) }
          : { type: 'TaggedTemplateExpression', tag: n, quasi: l },
        r,
        o,
        s,
        a,
        i,
        p
      );
    }
    case 25:
      if ((1 === r && report(e, 0), (e.assignable = 0), nextToken(e, t, 0), (r = 1), (2555904 & e.token) > 0)) {
        const s = parseIdentifier(e, t);
        (n =
          2 & t
            ? {
                type: 'MemberExpression',
                object: n,
                computed: !1,
                property: s,
                optional: 1 === r,
                shortCircuited: 1 === o,
                start: a,
                end: e.endIndex,
                loc: setLoc(e, i, p)
              }
            : {
                type: 'MemberExpression',
                object: n,
                computed: !1,
                property: s,
                optional: 1 === r,
                shortCircuited: 1 === o
              }),
          (r = 0),
          (o = 1);
      }
      return parseMemberExpression(e, t, n, r, o, s, a, i, p);
    default:
      return n;
  }
}
function parseArguments(e, t, n) {
  nextToken(e, t, 1), (t = 8192 ^ (8192 | t));
  const r = [];
  for (
    ;
    17 !== e.token && (r.push(15 === e.token ? parseSpreadElement(e, t, n) : parseExpression(e, t, n)), 19 === e.token);

  )
    nextToken(e, t, 1);
  return consume(e, t, 17, 0), r;
}
function parseSpreadElement(e, t, n) {
  const { start: r, line: o, column: s } = e;
  return (
    nextToken(e, t, 1),
    2 & t
      ? { type: 'SpreadElement', argument: parseExpression(e, t, n), start: r, end: e.endIndex, loc: setLoc(e, o, s) }
      : { type: 'SpreadElement', argument: parseExpression(e, t, n) }
  );
}
function parseTemplateLiteral(e, t) {
  const { start: n, line: r, column: o, tokenValue: s, tokenRaw: a } = e;
  (e.assignable = 0), consume(e, t, 1048586, 0);
  const i = [
    2 & t
      ? {
          type: 'TemplateElement',
          value: { cooked: s, raw: a },
          tail: !0,
          start: n,
          end: e.endIndex,
          loc: setLoc(e, r, o)
        }
      : { type: 'TemplateElement', value: { cooked: s, raw: a }, tail: !0 }
  ];
  return 2 & t
    ? { type: 'TemplateLiteral', expressions: [], quasis: i, start: n, end: e.endIndex, loc: setLoc(e, r, o) }
    : { type: 'TemplateLiteral', expressions: [], quasis: i };
}
function parseTemplate(e, t, n, r, o) {
  const s = [parseTemplateElement(e, (t = 8192 ^ (8192 | t)), !1)];
  consume(e, t, 1048585, 1);
  const a = [parseExpressions(e, t, 0)];
  for (; 1048585 === (e.token = scanTemplateTail(e, t)); )
    s.push(parseTemplateElement(e, t, !1)), consume(e, t, 1048585, 1), a.push(parseExpressions(e, t, 0));
  return (
    s.push(parseTemplateElement(e, t, !0)),
    consume(e, t, 1048586, 0),
    2 & t
      ? { type: 'TemplateLiteral', expressions: a, quasis: s, start: n, end: e.endIndex, loc: setLoc(e, r, o) }
      : { type: 'TemplateLiteral', expressions: a, quasis: s }
  );
}
function parseTemplateElement(e, t, n) {
  const { start: r, line: o, column: s } = e;
  return 2 & t
    ? {
        type: 'TemplateElement',
        value: { cooked: e.tokenValue, raw: e.tokenRaw },
        tail: n,
        start: r,
        end: e.endIndex,
        loc: setLoc(e, o, s)
      }
    : { type: 'TemplateElement', value: { cooked: e.tokenValue, raw: e.tokenRaw }, tail: n };
}
function parseYieldExpression(e, t, n, r, o, s, a) {
  if (((e.flags |= 1 === n ? 1024 : 0), 2097152 & t)) {
    nextToken(e, t, 1), 8388608 & t && report(e, 36), 0 === r && report(e, 60), 23 === e.token && report(e, 65);
    let n = null,
      i = 0;
    return (
      0 === e.newLine &&
        ((i = consumeOpt(e, t, 135314230, 1)), (1048576 & e.token || 1 === i) && (n = parseExpression(e, t, 0))),
      (e.assignable = 0),
      2 & t
        ? { type: 'YieldExpression', argument: n, delegate: 1 === i, start: o, end: e.endIndex, loc: setLoc(e, s, a) }
        : { type: 'YieldExpression', argument: n, delegate: 1 === i }
    );
  }
  return 1024 & t && report(e, 31, 'yield'), parseIdentifierOrArrow(e, t);
}
function parseAwaitExpression(e, t, n, r, o, s, a) {
  if ((1 === n && (e.flags |= 2048), 4194304 & t)) {
    1 === r && report(e, 0), 8388608 & t && report(e, 37), nextToken(e, t, 1);
    const i = parseLeftHandSideExpression(e, t, n, 1, 0);
    return (
      (e.assignable = 0),
      2 & t
        ? { type: 'AwaitExpression', argument: i, start: o, end: e.endIndex, loc: setLoc(e, s, a) }
        : { type: 'AwaitExpression', argument: i }
    );
  }
  return 2048 & t && report(e, 31, 'Await'), parseIdentifierOrArrow(e, t);
}
function parseIdentifierOrArrow(e, t) {
  const { start: n, line: r, column: o } = e;
  let s = parseIdentifier(e, t);
  if (((e.assignable = 1), 11 === e.token)) {
    const a = 256 ^ (256 | e.flags),
      i = { parent: { parent: void 0, type: 2 }, type: 2, scopeError: void 0 };
    addBlockName(e, t, i, e.tokenValue, 1, 0), (s = parseArrowFunction(e, t, i, [s], 0, n, r, o)), (e.flags |= a);
  }
  return s;
}
function parsePrimaryExpression(e, t, n, r, o, s, a, i, p, l) {
  const c = e.token;
  if (2162688 == (2162688 & c)) {
    if (3473517 === c) return parseYieldExpression(e, t, a, s, i, p, l);
    if (3211376 === c) return parseAwaitExpression(e, t, a, r, i, p, l);
    if (2162799 === c) return parseAsyncExpression(e, t, r, o, s, i, p, l);
    3473483 === c && (1024 & t && report(e, 94), 48 & n && report(e, 29));
    const d = e.tokenValue,
      u = parseIdentifier(e, 65536 | t);
    return 11 === e.token
      ? (0 === o && report(e, 0),
        0 === s && report(e, 73),
        r && report(e, 74),
        1024 & t && 537919488 == (537919488 & c) && report(e, 27),
        isValidIdentifier(t, c) || report(e, 0),
        parseAsyncArrowIdentifier(
          e,
          t,
          { parent: { parent: void 0, type: 2 }, type: 512, scopeError: void 0 },
          0,
          d,
          c,
          u,
          i,
          p,
          l
        ))
      : ((e.assignable = 1024 & t && 537919488 == (537919488 & c) ? 0 : 1), u);
  }
  if (269484032 == (269484032 & c)) return parseUpdateExpressionPrefix(e, t, r, o, i, p, l);
  switch (c) {
    case 1179694:
    case 1048624:
    case 1048625:
    case 135309874:
    case 135309875:
    case 1179693:
    case 1179695:
      return parseUnaryExpression(e, t, a, r, o, i, p, l);
    case 1572868:
    case 1572866:
      return parseLiteral(e, t);
    case 1179745:
      return parseThisExpression(e, t, i, p, l);
    case 1179738:
      return parseFunctionExpression(e, t, 0, i, p, l);
    case 1179654:
    case 1179655:
      return parseExpressionFromLiteral(e, t, 'true' === e.tokenValue, i, p, l);
    case 1179656:
      return parseNullLiteral(e, t, i, p, l);
    case 34603028:
      return parseArrayLiteral(e, t, s ? 0 : 1, a, i, p, l);
    case 34603021:
      return parseObjectLiteral(e, t, s ? 0 : 1, a, i, p, l);
    case 1048588:
      return parseParenthesizedExpression(e, t, a, s, 1, 0, i, p, l);
    case 1572867:
      return parseBigIntLiteral(e, t, i, p, l);
    case 1179741:
      return parseNewExpression(e, t, a, i, p, l);
    case 1179728:
      return parseClassExpression(e, t, a, i, p, l);
    case 1179743:
      return parseSuperExpression(e, t, i, p, l);
    case 1048581:
      return parseRegExpLiteral(e, t, i, p, l);
    case 1048586:
      return parseTemplateLiteral(e, t);
    case 1048585:
      return parseTemplate(e, t, i, p, l);
    case 1179740:
      return parseImportCallOrMetaExpression(e, t, r, i, p, l);
    default:
      if (isValidIdentifier(t, e.token)) return parseIdentifierOrArrow(e, t);
      report(e, 0);
  }
}
function parseAsyncExpression(e, t, n, r, o, s, a, i) {
  const { token: p, tokenValue: l, start: c, line: d, column: u } = e;
  if ((nextToken(e, t, 0), 0 === e.newLine)) {
    if (1179738 === e.token)
      return 0 === r && report(e, 86, KeywordDescTable[255 & e.token]), parseFunctionExpression(e, t, 1, s, a, i);
    if (2162688 == (2162688 & e.token))
      return (
        0 === r && report(e, 86, KeywordDescTable[255 & e.token]),
        0 === o && report(e, 73),
        3211376 === e.token && report(e, 37),
        2098176 & t && 3473517 === e.token && report(e, 36),
        parseAsyncArrowIdentifier(
          e,
          t,
          { parent: { parent: void 0, type: 2 }, type: 512, scopeError: void 0 },
          1,
          e.tokenValue,
          e.token,
          parseIdentifier(e, t),
          s,
          a,
          i
        )
      );
  }
  const x = parseIdentifierFromValue(e, t, l, c, d, u);
  return 0 === n && 1048588 === e.token
    ? parseAsyncArrowOrCallExpression(e, 8192 ^ (8192 | t), x, o, e.newLine, 1, 0, s, a, i)
    : 11 === e.token
    ? (1 === n && report(e, 74),
      3211376 === e.token && report(e, 37),
      2098176 & t && 3473517 === e.token && report(e, 36),
      parseAsyncArrowIdentifier(
        e,
        t,
        { parent: { parent: void 0, type: 2 }, type: 512, scopeError: void 0 },
        0,
        'async',
        p,
        x,
        s,
        a,
        i
      ))
    : x;
}
function parseAsyncArrowIdentifier(e, t, n, r, o, s, a, i, p, l) {
  return (
    (e.flags = (256 ^ (256 | e.flags)) | (537919488 == (537919488 & s) ? 32 : 0)),
    addBlockName(e, t, n, o, 1, 0),
    parseArrowFunction(e, t, n, [a], r, i, p, l)
  );
}
function parseAsyncArrowOrCallExpression(e, t, n, r, o, s, a, i, p, l) {
  nextToken(e, t, 1);
  const c = { parent: { parent: void 0, type: 2 }, type: 512, scopeError: void 0 };
  if (17 === e.token)
    return (
      nextToken(e, t, 0),
      11 === e.token
        ? (1 === o && report(e, 0),
          2048 & e.flags && report(e, 37),
          parseArrowFunctionAfterParen(e, t, c, 0, [], r, 1, i, p, l))
        : 2 & t
        ? {
            type: 'CallExpression',
            callee: n,
            arguments: [],
            optional: !1,
            shortCircuited: !1,
            start: i,
            end: e.endIndex,
            loc: setLoc(e, p, l)
          }
        : { type: 'CallExpression', callee: n, arguments: [], optional: !1, shortCircuited: !1 }
    );
  e.flags = 1280 ^ (1280 | e.flags);
  let d = null,
    u = 0;
  const x = [];
  for (; 17 !== e.token; ) {
    const { token: r, tokenValue: o, start: i, line: p, column: l } = e;
    if ((2555904 & r) > 0)
      addBlockName(e, t, c, o, 1, 0),
        (d = parsePrimaryExpression(e, t, s, 0, 1, 1, 1, i, p, l)),
        17 === e.token || 19 === e.token
          ? (u |= (0 === e.assignable ? 264 : 0) | ((538181632 & r) > 0 ? 256 : 0))
          : 67108896 === e.token
          ? ((u |= 256), (d = parseAssignmentExpression(e, t, 0, 1, d, i, p, l)))
          : ((u |= 8),
            (d = parseMemberExpression(e, t, d, 0, 0, 0, i, p, l)),
            (d = parseAssignmentExpression(e, t, 0, 1, d, i, p, l)));
    else if (33554432 & r)
      (d =
        34603021 === e.token
          ? parseObjectLiteralOrPattern(e, t, c, 0, 0, 1, s, a, i, p, l)
          : parseArrayExpressionOrPattern(e, t, c, 0, 0, 1, s, a, i, p, l)),
        (u |= 256 | e.flags),
        17 !== e.token &&
          19 !== e.token &&
          (16 & u && report(e, 64),
          (d = parseMemberExpression(e, t, d, 0, 0, 0, i, p, l)),
          (u |= 8),
          135266304 == (135266304 & e.token) && (d = parseBinaryExpression(e, t, 0, 4, r, i, p, l, d)),
          23 === e.token && (d = parseConditionalExpression(e, t, d, i, p, l)));
    else {
      if (15 !== r) {
        for (d = parseExpression(e, t, 0), x.push(d); consumeOpt(e, t, 19, 1); ) x.push(parseExpression(e, t, 0));
        return (
          consume(e, t, 17, 0),
          (e.flags = (30 ^ (30 | e.flags)) | u | 8),
          (e.assignable = 0),
          2 & t
            ? {
                type: 'CallExpression',
                callee: n,
                arguments: x,
                optional: !1,
                shortCircuited: !1,
                start: i,
                end: e.endIndex,
                loc: setLoc(e, p, l)
              }
            : { type: 'CallExpression', callee: n, arguments: x, optional: !1, shortCircuited: !1 }
        );
      }
      (d = parseSpreadOrRestElement(e, t, c, 17, 0, 1, 1, s, a, i, p, l)),
        (u |= 256 | (17 === e.token ? 0 : 8) | e.flags);
    }
    if ((x.push(d), 19 !== e.token)) break;
    nextToken(e, t, 1);
  }
  return (
    consume(e, t, 17, 0),
    (u |= (1024 & e.flags ? 1024 : 0) | (2048 & e.flags ? 2048 : 0)),
    11 === e.token
      ? (2048 & e.flags && report(e, 37), parseArrowFunctionAfterParen(e, t, c, u, x, r, 1, i, p, l))
      : ((e.flags = 3072 ^ (3072 | e.flags)),
        16 & u && report(e, 58),
        (e.assignable = 0),
        2 & t
          ? {
              type: 'CallExpression',
              callee: n,
              arguments: x,
              optional: !1,
              shortCircuited: !1,
              start: i,
              end: e.endIndex,
              loc: setLoc(e, p, l)
            }
          : { type: 'CallExpression', callee: n, arguments: x, optional: !1, shortCircuited: !1 })
  );
}
function parseImportCallOrMetaExpression(e, t, n, r, o, s) {
  const a = e.tokenValue;
  nextToken(e, t, 1);
  let i = parseIdentifierFromValue(e, t, a, r, o, s);
  return 14 === e.token
    ? parseImportMetaExpression(e, t, i, r, o, s)
    : (1 === n && report(e, 51),
      (i = parseImportExpression(e, t, r, o, s)),
      (e.assignable = 0),
      parseMemberExpression(e, t, i, 0, 0, 0, r, o, s));
}
function parseNewExpression(e, t, n, r, o, s) {
  if ((nextToken(e, t, 1), (e.assignable = 0), 14 === e.token)) return parseNewTargetExpression(e, t, r, o, s);
  const { start: a, line: i, column: p } = e,
    l = parseNewMemberExpression(e, t, n, parsePrimaryExpression(e, t, 0, 1, 1, 0, n, a, i, p), a, i, p),
    c = 1048588 === e.token ? parseArguments(e, t, n) : [];
  return (
    (e.assignable = 0),
    2 & t
      ? { type: 'NewExpression', callee: l, arguments: c, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
      : { type: 'NewExpression', callee: l, arguments: c }
  );
}
function parseNewTargetExpression(e, t, n, r, o) {
  nextToken(e, t, 0), (0 != (67108864 & t) && 'target' === e.tokenValue) || report(e, 88);
  const s = parseIdentifierFromValue(e, t, 'new', n, r, o),
    a = parseIdentifier(e, t);
  return 2 & t
    ? { type: 'MetaProperty', meta: s, property: a, start: n, end: e.endIndex, loc: setLoc(e, r, o) }
    : { type: 'MetaProperty', meta: s, property: a };
}
function parseNewMemberExpression(e, t, n, r, o, s, a) {
  switch (e.token) {
    case 14: {
      nextToken(e, t, 0), (e.assignable = 1), 0 == (2555904 & e.token) && report(e, 95);
      const i = parseIdentifier(e, t);
      return parseNewMemberExpression(
        e,
        t,
        n,
        2 & t
          ? {
              type: 'MemberExpression',
              object: r,
              computed: !1,
              property: i,
              optional: !1,
              shortCircuited: !1,
              start: o,
              end: e.endIndex,
              loc: setLoc(e, s, a)
            }
          : { type: 'MemberExpression', object: r, computed: !1, property: i, optional: !1, shortCircuited: !1 },
        o,
        s,
        a
      );
    }
    case 34603028: {
      nextToken(e, t, 1);
      const i = parseExpressions(e, t, n);
      return (
        consume(e, t, 21, 0),
        parseNewMemberExpression(
          e,
          t,
          n,
          2 & t
            ? {
                type: 'MemberExpression',
                object: r,
                computed: !0,
                property: i,
                optional: !1,
                shortCircuited: !1,
                start: o,
                end: e.endIndex,
                loc: setLoc(e, s, a)
              }
            : { type: 'MemberExpression', object: r, computed: !0, property: i, optional: !1, shortCircuited: !1 },
          o,
          s,
          a
        )
      );
    }
    case 25:
      report(e, 46);
    case 1048585:
    case 1048586: {
      e.assignable = 0;
      const i = 1048585 === e.token ? parseTemplate(e, 65536 | t, o, s, a) : parseTemplateLiteral(e, t);
      return parseNewMemberExpression(
        e,
        t,
        n,
        2 & t
          ? { type: 'TaggedTemplateExpression', tag: r, quasi: i, start: o, end: e.endIndex, loc: setLoc(e, s, a) }
          : { type: 'TaggedTemplateExpression', tag: r, quasi: i },
        o,
        s,
        a
      );
    }
    default:
      return r;
  }
}
function parseSuperExpression(e, t, n, r, o) {
  return (
    nextToken(e, t, 0),
    1048588 === e.token
      ? (0 == (524288 & t) && report(e, 90), (e.assignable = 0))
      : 34603028 === e.token || 14 === e.token
      ? (0 == (262144 & t) && report(e, 89), (e.assignable = 1))
      : report(e, 86, 'super'),
    2 & t ? { type: 'Super', start: n, end: e.endIndex, loc: setLoc(e, r, o) } : { type: 'Super' }
  );
}
function parseRegExpLiteral(e, t, n, r, o) {
  const { tokenRegExp: s, tokenValue: a } = e;
  if ((nextToken(e, t, 0), (e.assignable = 0), 8 & t)) {
    const i = e.source.slice(e.start, e.index);
    return 2 & t
      ? { type: 'Literal', value: a, regex: s, raw: i, start: n, end: e.endIndex, loc: setLoc(e, r, o) }
      : { type: 'Literal', value: a, raw: i, regex: s };
  }
  return 2 & t
    ? { type: 'Literal', value: a, regex: s, start: n, end: e.endIndex, loc: setLoc(e, r, o) }
    : { type: 'Literal', value: a, regex: s };
}
function parseBigIntLiteral(e, t, n, r, o) {
  const s = e.source.slice(n, e.index);
  return (
    nextToken(e, t, 0),
    (e.assignable = 0),
    2 & t
      ? { type: 'BigIntLiteral', value: null, bigint: s, start: n, end: e.endIndex, loc: setLoc(e, r, o) }
      : { type: 'BigIntLiteral', value: null, bigint: s }
  );
}
function parseArrowFunctionAfterParen(e, t, n, r, o, s, a, i, p, l) {
  12 & r && report(e, 71),
    2098176 & t && 1024 & r && report(e, 36),
    (e.flags = (3102 ^ (3102 | e.flags)) | r),
    0 === s && report(e, 73);
  let c = o.length;
  for (; c--; ) reinterpretToPattern(e, o[c]);
  return parseArrowFunction(e, t, n, o, a, i, p, l);
}
function parseArrowFunction(e, t, n, r, o, s, a, i) {
  1 === e.newLine && report(e, 78), consume(e, t, 11, 1), (t = (15728640 ^ (15728640 | t)) | (o << 22));
  const p = 34603021 !== e.token;
  let l;
  if ((void 0 !== n.scopeError && reportScopeError(n.scopeError), p)) l = parseExpression(e, t, 0);
  else if (((l = parseFunctionBody(e, 402657280 ^ (402657280 | t), n, void 0, 1, void 0)), 0 === e.newLine)) {
    const { token: t } = e;
    switch (((135266304 & t) > 0 && report(e, 86, KeywordDescTable[255 & e.token]), t)) {
      case 14:
      case 34603028:
      case 1048586:
      case 23:
        report(e, 97);
      case 1048588:
        report(e, 98);
    }
  } else
    switch (e.token) {
      case 14:
      case 23:
      case 135318585:
        report(e, 86, KeywordDescTable[255 & e.token]);
    }
  return (
    (e.assignable = 0),
    2 & t
      ? {
          type: 'ArrowFunctionExpression',
          body: l,
          params: r,
          async: 1 === o,
          expression: p,
          start: s,
          end: e.endIndex,
          loc: setLoc(e, a, i)
        }
      : { type: 'ArrowFunctionExpression', body: l, params: r, async: 1 === o, expression: p }
  );
}
function parseParenthesizedExpression(e, t, n, r, o, s, a, i, p) {
  nextToken(e, t, 1), (e.flags = 3328 ^ (3328 | e.flags)), (t = 8192 ^ (8192 | t));
  let l = [];
  if (17 === e.token)
    return (
      0 === r && report(e, 73),
      nextToken(e, t, 0),
      parseArrowFunction(e, t, { parent: { parent: void 0, type: 2 }, type: 512, scopeError: void 0 }, l, 0, a, i, p)
    );
  let c = [],
    d = 0,
    u = 0;
  const { start: x, line: m, column: f } = e,
    k = { parent: { parent: void 0, type: 2 }, type: 512, scopeError: void 0 };
  for (e.assignable = 1; 17 !== e.token; ) {
    const { token: r, start: a, line: i, column: p, tokenValue: y } = e;
    if ((2555904 & r) > 0)
      addBlockName(e, t, k, y, 1, 0),
        (l = parsePrimaryExpression(e, t, o, 0, 1, 1, 1, a, i, p)),
        19 === e.token || 17 === e.token
          ? (u |=
              (1 === e.assignable ? 0 : 264) |
              (537919488 == (537919488 & r) ? 256 : 0) |
              (262144 == (262144 & r) ? 256 : 0))
          : ((u |= 67108896 === e.token ? 256 : 8),
            (l = parseMemberExpression(e, t, l, 0, 0, n, a, i, p)),
            17 !== e.token && 19 !== e.token && (l = parseAssignmentExpression(e, t, 0, 1, l, a, i, p)));
    else {
      if (!(33554432 & r)) {
        if (15 === r) {
          (l = parseSpreadOrRestElement(e, t, k, 17, 0, 0, 0, o, s, a, i, p)),
            8 & e.flags && report(e, 63),
            !d || (17 !== e.token && 19 !== e.token) || c.push(l),
            (u |= 272);
          break;
        }
        if (
          ((u |= 8),
          (l = parseExpression(e, t, n)),
          !d || (19 !== e.token && 17 !== e.token) || c.push(l),
          19 === e.token && 0 === d && ((d = 1), (c = [l])),
          d)
        ) {
          for (; consumeOpt(e, t, 19, 1); ) c.push(parseExpression(e, t, n));
          l =
            2 & t
              ? { type: 'SequenceExpression', expressions: c, start: x, end: e.endIndex, loc: setLoc(e, m, f) }
              : { type: 'SequenceExpression', expressions: c };
        }
        return consume(e, t, 17, 0), (e.flags = (30 ^ (30 | e.flags)) | u), l;
      }
      (l =
        34603021 === e.token
          ? parseObjectLiteralOrPattern(e, t, k, 0, 0, 1, o, s, a, i, p)
          : parseArrayExpressionOrPattern(e, t, k, 0, 0, 1, o, s, a, i, p)),
        (u |= 256 | e.flags),
        (e.assignable = 0),
        19 !== e.token &&
          17 !== e.token &&
          (16 & u && report(e, 64),
          (l = parseMemberExpression(e, t, l, 0, 0, 0, a, i, p)),
          (u |= 8),
          (67108864 & e.token) > 0
            ? (0 === e.assignable && report(e, 60),
              (l = parseAssignmentOrPattern(e, t, 0, 0, l, KeywordDescTable[255 & e.token], a, i, p)))
            : (135266304 & e.token) > 0
            ? ((l = parseBinaryExpression(e, t, 0, 0, e.token, a, i, p, l)),
              23 === e.token && (l = parseConditionalExpression(e, t, l, a, i, p)))
            : 23 === e.token
            ? (l = parseConditionalExpression(e, t, l, a, i, p))
            : (u |= 0 === e.assignable ? 8 : 4));
    }
    if ((!d || (19 !== e.token && 17 !== e.token) || c.push(l), 19 !== e.token)) break;
    if ((nextToken(e, t, 1), d || ((d = 1), (c = [l])), 17 === e.token)) {
      u |= 16;
      break;
    }
  }
  return (
    d &&
      ((e.assignable = 0),
      (l =
        2 & t
          ? { type: 'SequenceExpression', expressions: c, start: x, end: e.endIndex, loc: setLoc(e, m, f) }
          : { type: 'SequenceExpression', expressions: c })),
    consume(e, t, 17, 0),
    8 & u && 16 & u && report(e, 62),
    (u |= (1024 & e.flags ? 1024 : 0) | (2048 & e.flags ? 2048 : 0)),
    11 === e.token
      ? (4196352 & t && 2048 & u && report(e, 37), parseArrowFunctionAfterParen(e, t, k, u, d ? c : [l], r, 0, a, i, p))
      : (16 & u && report(e, 75), (e.flags = (30 ^ (30 | e.flags)) | u), l)
  );
}
function parseExpressionStatement(e, t, n, r, o, s) {
  return (
    expectSemicolon(e, t),
    2 & t
      ? { type: 'ExpressionStatement', expression: n, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
      : { type: 'ExpressionStatement', expression: n }
  );
}
function parseLeftHandSideExpression(e, t, n, r, o) {
  const { start: s, line: a, column: i } = e;
  return parseMemberExpression(e, t, parsePrimaryExpression(e, t, 0, 0, r, o, n, s, a, i), 0, 0, n, s, a, i);
}
function parseIdentifier(e, t) {
  const { tokenValue: n, start: r, line: o, column: s } = e;
  return (
    nextToken(e, t, 0),
    2 & t
      ? { type: 'Identifier', name: n, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
      : { type: 'Identifier', name: n }
  );
}
function parseThisExpression(e, t, n, r, o) {
  return (
    nextToken(e, t, 0),
    (e.assignable = 0),
    2 & t ? { type: 'ThisExpression', start: n, end: e.endIndex, loc: setLoc(e, r, o) } : { type: 'ThisExpression' }
  );
}
function parseNullLiteral(e, t, n, r, o) {
  return (
    nextToken(e, t, 0),
    (e.assignable = 0),
    2 & t
      ? { type: 'Literal', value: null, start: n, end: e.endIndex, loc: setLoc(e, r, o) }
      : { type: 'Literal', value: null }
  );
}
function parseExpressionFromLiteral(e, t, n, r, o, s) {
  return (
    nextToken(e, t, 0),
    (e.assignable = 0),
    2 & t
      ? { type: 'Literal', value: n, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
      : { type: 'Literal', value: n }
  );
}
function parseLiteral(e, t) {
  const n = e.tokenValue,
    r = e.start,
    o = e.line,
    s = e.column,
    a = e.index;
  if (((e.assignable = 0), nextToken(e, t, 0), 8 & t)) {
    const i = e.source.slice(r, a);
    return 2 & t
      ? { type: 'Literal', value: n, raw: i, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
      : { type: 'Literal', value: n, raw: i };
  }
  return 2 & t
    ? { type: 'Literal', value: n, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
    : { type: 'Literal', value: n };
}
function parseUpdateExpression(e, t, n, r, o, s) {
  0 === e.assignable && report(e, 66);
  const a = KeywordDescTable[255 & e.token];
  return (
    nextToken(e, t, 0),
    (e.assignable = 0),
    2 & t
      ? {
          type: 'UpdateExpression',
          argument: n,
          operator: a,
          prefix: !1,
          start: r,
          end: e.endIndex,
          loc: setLoc(e, o, s)
        }
      : { type: 'UpdateExpression', argument: n, operator: a, prefix: !1 }
  );
}
function parseUpdateExpressionPrefix(e, t, n, r, o, s, a) {
  0 === r && report(e, 0), 1 === n && report(e, 47);
  const i = KeywordDescTable[255 & e.token];
  nextToken(e, t, 1);
  const p = parseLeftHandSideExpression(e, t, 0, 1, 0);
  return (
    0 === e.assignable && report(e, 66),
    (e.assignable = 0),
    2 & t
      ? {
          type: 'UpdateExpression',
          argument: p,
          operator: i,
          prefix: !0,
          start: o,
          end: e.endIndex,
          loc: setLoc(e, s, a)
        }
      : { type: 'UpdateExpression', argument: p, operator: i, prefix: !0 }
  );
}
function parseUnaryExpression(e, t, n, r, o, s, a, i) {
  0 === o && report(e, 0), 1 === r && report(e, 48, KeywordDescTable[255 & e.token]);
  const p = e.token;
  nextToken(e, t, 1);
  const l = parseLeftHandSideExpression(e, t, n, 1, 0);
  return (
    135318585 === e.token && report(e, 76),
    1024 & t && 1179694 === p && 'Identifier' === l.type && report(e, 77),
    (e.assignable = 0),
    2 & t
      ? {
          type: 'UnaryExpression',
          operator: KeywordDescTable[255 & p],
          argument: l,
          prefix: !0,
          start: s,
          end: e.endIndex,
          loc: setLoc(e, a, i)
        }
      : { type: 'UnaryExpression', operator: KeywordDescTable[255 & p], argument: l, prefix: !0 }
  );
}
function parseArrayLiteral(e, t, n, r, o, s, a) {
  const i = parseArrayExpressionOrPattern(e, t, void 0, n, 0, r, 8, 0, o, s, a);
  return 0 == (16 & t) && 512 & e.flags && report(e, 68), 16 == (16 & e.flags) && report(e, 58), i;
}
function parseAssignmentOrPattern(e, t, n, r, o, s, a, i, p) {
  nextToken(e, t, 1);
  const l = parseExpression(e, t, r);
  return (
    (e.assignable = 0),
    0 === n
      ? 2 & t
        ? {
            type: 'AssignmentExpression',
            left: o,
            operator: s,
            right: l,
            start: a,
            end: e.endIndex,
            loc: setLoc(e, i, p)
          }
        : { type: 'AssignmentExpression', left: o, operator: s, right: l }
      : 2 & t
      ? { type: 'AssignmentPattern', left: o, right: l, start: a, end: e.endIndex, loc: setLoc(e, i, p) }
      : { type: 'AssignmentPattern', left: o, right: l }
  );
}
function parseArrayExpressionOrPattern(e, t, n, r, o, s, a, i, p, l, c) {
  nextToken(e, t, 1);
  const d = [];
  let u = 0;
  for (t = 8192 ^ (8192 | t); 21 !== e.token; )
    if (consumeOpt(e, t, 19, 1)) d.push(null);
    else {
      let r;
      const { token: p, start: l, line: c, column: x, tokenValue: m } = e;
      if (
        ((2555904 & p) > 0
          ? ((r = parsePrimaryExpression(e, t, a, 0, 1, 1, s, l, c, x)),
            67108896 === e.token
              ? (0 === e.assignable && report(e, 60), (r = parseAssignmentOrPattern(e, t, o, s, r, '=', l, c, x)))
              : 19 === e.token || 21 === e.token
              ? 1 === e.assignable
                ? addVarOrBlock(e, t, n, m, a, i)
                : (u |= 8)
              : ((u |= 1 & a ? 4 : 8 != (8 & a) ? 8 : 0),
                (r = parseMemberExpression(e, t, r, 0, 0, 0, l, c, x)),
                (67108864 & e.token) > 0
                  ? (0 === e.assignable && report(e, 60),
                    (r = parseAssignmentOrPattern(e, t, o, 0, r, KeywordDescTable[255 & e.token], l, c, x)))
                  : (135266304 & e.token) > 0
                  ? ((u |= 8),
                    (r = parseBinaryExpression(e, t, 0, 0, e.token, l, c, x, r)),
                    23 === e.token && (r = parseConditionalExpression(e, t, r, l, c, x)))
                  : 23 === e.token
                  ? ((u |= 8), (r = parseConditionalExpression(e, t, r, l, c, x)))
                  : (u |= 0 === e.assignable ? 8 : 4)))
          : 33554432 & p
          ? ((r =
              34603021 === e.token
                ? parseObjectLiteralOrPattern(e, t, n, 0, o, 0, a, i, l, c, x)
                : parseArrayExpressionOrPattern(e, t, n, 0, o, 0, a, i, l, c, x)),
            (u |= e.flags),
            (e.assignable = 8 & u ? 0 : 1),
            19 !== e.token && 21 !== e.token
              ? (16 & u && report(e, 56),
                (r = parseMemberExpression(e, t, r, 0, 0, 0, l, c, x)),
                (u = 0 === e.assignable ? 8 : 0),
                (67108864 & e.token) > 0
                  ? (0 === e.assignable && report(e, 60),
                    (r = parseAssignmentOrPattern(e, t, o, 0, r, KeywordDescTable[255 & e.token], l, c, x)))
                  : (135266304 & e.token) > 0
                  ? ((r = parseBinaryExpression(e, t, 0, 0, e.token, l, c, x, r)),
                    23 === e.token && (r = parseConditionalExpression(e, t, r, l, c, x)))
                  : 23 === e.token
                  ? (r = parseConditionalExpression(e, t, r, l, c, x))
                  : (u |= 0 === e.assignable ? 8 : 4))
              : (u |= 8 & u ? 8 : 0))
          : 15 === p
          ? ((r = parseSpreadOrRestElement(e, t, n, 21, o, 0, s, a, i, l, c, x)),
            19 !== e.token && 21 !== e.token && report(e, 86, KeywordDescTable[255 & e.token]),
            (u |= e.flags))
          : ((r = parseLeftHandSideExpression(e, t, 0, 1, 1)),
            19 !== e.token && 21 !== e.token
              ? ((r = parseAssignmentExpression(e, t, o, 0, r, l, c, x)), (u |= 0 == (9 & a) && 1048588 === p ? 8 : 0))
              : 0 === e.assignable
              ? (u |= 8)
              : 1048588 === p && (u |= 1 === e.assignable && 9 & a ? 4 : 8)),
        d.push(r),
        19 !== e.token)
      )
        break;
      nextToken(e, t, 1);
    }
  consume(e, t, 21, 0);
  const x =
    2 & t
      ? { type: o ? 'ArrayPattern' : 'ArrayExpression', elements: d, start: p, end: e.endIndex, loc: setLoc(e, l, c) }
      : { type: o ? 'ArrayPattern' : 'ArrayExpression', elements: d };
  return 0 === r && 67108864 & e.token
    ? parseArrayOrObjectAssignmentPattern(e, t, u, o, s, p, l, c, x)
    : ((e.flags = (30 ^ (30 | e.flags)) | u), x);
}
function parseArrayOrObjectAssignmentPattern(e, t, n, r, o, s, a, i, p) {
  67108896 !== e.token && report(e, 60), 8 == (8 & n) && report(e, 60), 0 === r && reinterpretToPattern(e, p);
  const l = parseAssignmentOrPattern(e, t, r, o, p, '=', s, a, i);
  return (e.flags = (30 ^ (30 | e.flags)) | (528 ^ (528 | n))), l;
}
function parseFunctionExpression(e, t, n, r, o, s) {
  nextToken(e, t, 1);
  const a = (2 * n + consumeOpt(e, t, 135314230, 0)) << 21;
  let i,
    p = null,
    l = { parent: void 0, type: 2 };
  return (
    (2555904 & e.token) > 0 &&
      ((l = { parent: { parent: void 0, type: 2 }, type: 128, scopeError: void 0 }),
      validateFunctionName(e, ((3072 & t) << 11) | a, e.token),
      (i = e.token),
      (p = parseIdentifier(e, t))),
    parseFunctionLiteral(
      e,
      (t = (32243712 ^ (32243712 | t)) | 67108864 | a),
      l,
      p,
      i,
      0,
      'FunctionExpression',
      0,
      r,
      o,
      s
    )
  );
}
function parseFunctionLiteral(e, t, n, r, o, s, a, i, p, l, c) {
  const d = parseFormalParams(
      e,
      8388608 | t,
      (n = { parent: { parent: void 0, type: 2 }, type: 256, scopeError: void 0 }),
      1,
      0,
      i
    ),
    u = parseFunctionBody(
      e,
      402784256 ^ (402784256 | t),
      { parent: n, type: 64, scopeError: void 0 },
      o,
      s,
      n.scopeError
    );
  return (
    (e.assignable = 0),
    2 & t
      ? {
          type: a,
          params: d,
          body: u,
          async: (4194304 & t) > 0,
          generator: (2097152 & t) > 0,
          id: r,
          start: p,
          end: e.endIndex,
          loc: setLoc(e, l, c)
        }
      : { type: a, params: d, body: u, async: (4194304 & t) > 0, generator: (2097152 & t) > 0, id: r }
  );
}
function parseFunctionBody(e, t, n, r, o, s) {
  const { start: a, line: i, column: p } = e;
  consume(e, t, 34603021, 1);
  const l = [],
    c = t;
  let d = 0;
  if (16777232 !== e.token) {
    for (; 1572868 === e.token; ) {
      const { index: n, start: r, line: o, column: s, tokenValue: a, isUnicodeEscape: i } = e;
      let p = parseLiteral(e, t);
      isExactlyStrictDirective(e, n, r, a)
        ? ((d = 1), (t |= 1024), 256 & e.flags && report(e, 92), 128 & e.flags && report(e, 93))
        : (d = 0),
        0 === d && (p = parseNonDirectiveExpression(e, t, p, r, o, s)),
        expectSemicolon(e, t),
        l.push(parseDirectives(e, t, i, a, p, r, o, s));
    }
    1024 & t &&
      (r && (537919488 == (537919488 & r) && report(e, 27), 262144 == (262144 & r) && report(e, 26)),
      s && 0 == (1024 & c) && 0 == (268435456 & t) && reportScopeError(s),
      32 == (32 & e.flags) && report(e, 27),
      64 == (64 & e.flags) && report(e, 26));
  }
  for (e.flags = 3296 ^ (3296 | e.flags); 16777232 !== e.token; )
    l.push(parseStatementListItem(e, 8192 ^ (8192 | t), n, 4, null, null));
  return (
    consume(e, t, 16777232, 1 & o ? 1 : 0),
    (e.flags = 3328 ^ (3328 | e.flags)),
    2 & t
      ? { type: 'BlockStatement', body: l, start: a, end: e.endIndex, loc: setLoc(e, i, p) }
      : { type: 'BlockStatement', body: l }
  );
}
function parseClassExpression(e, t, n, r, o, s) {
  nextToken(e, t, 0);
  const a = 16785408 ^ (16785408 | t);
  t |= 1024;
  let i = null;
  if (2555904 & e.token && 131159 !== e.token) {
    const { token: r, start: o, line: s, column: a, tokenValue: p } = e;
    isStrictReservedWord(e, t, r, n) && report(e, 26),
      nextToken(e, t, 0),
      (i = parseIdentifierFromValue(e, t, p, o, s, a));
  }
  return parseClassDeclarationOrExpressionRest(e, t, a, i, n, 0, 'ClassExpression', r, o, s);
}
function parseClassDeclarationOrExpressionRest(e, t, n, r, o, s, a, i, p, l) {
  let c = null;
  131159 === e.token
    ? (nextToken(e, t, 1), (c = parseLeftHandSideExpression(e, t, o, 0, 0)), (n |= 524288))
    : (n = 524288 ^ (524288 | n));
  const d = parseClassBody(e, n, t, s, o);
  return (
    (e.assignable = 0),
    2 & t
      ? { type: a, id: r, superClass: c, body: d, start: i, end: e.endIndex, loc: setLoc(e, p, l) }
      : { type: a, id: r, superClass: c, body: d }
  );
}
function parseClassBody(e, t, n, r, o) {
  const { start: s, line: a, column: i } = e;
  consume(e, t, 34603021, 1);
  const p = [];
  for (e.flags = 1 ^ (1 | e.flags); 16777232 !== e.token; )
    16777234 !== e.token
      ? p.push(parseClassElementList(e, t, n, 0, null, 0, o, 0, e.start, e.line, e.column))
      : nextToken(e, t, 0);
  return (
    consume(e, t, 16777232, r ? 1 : 0),
    2 & t
      ? { type: 'ClassBody', body: p, start: s, end: e.endIndex, loc: setLoc(e, a, i) }
      : { type: 'ClassBody', body: p }
  );
}
function parseClassElementList(e, t, n, r, o, s, a, i, p, l, c) {
  const { token: d, start: u, line: x, column: m } = e;
  if ((2555904 & d) > 0) {
    if (((o = parseIdentifier(e, t)), 1048588 !== e.token))
      switch (d) {
        case 262252:
          if (0 == (32 & i)) return parseClassElementList(e, t, n, r, o, s, a, 32 | i, u, x, m);
          break;
        case 2162799:
          0 === e.newLine && (i |= 16 | (consumeOpt(e, t, 135314230, 0) ? 8 : 0));
          break;
        case 65650:
          i |= 128;
          break;
        case 65651:
          i |= 256;
      }
  } else
    524288 == (524288 & d)
      ? (o = parseLiteral(e, t))
      : 34603028 === d
      ? ((s = 1), (o = parseComputedPropertyName(e, n, a)))
      : 135314230 === d
      ? ((i |= 8), nextToken(e, t, 0))
      : report(e, 86, KeywordDescTable[255 & e.token]);
  408 & i &&
    ((2555904 & e.token) > 0
      ? (o = parseIdentifier(e, t))
      : 524288 == (524288 & e.token)
      ? (o = parseLiteral(e, t))
      : 34603028 === e.token
      ? ((s = 1), (o = parseComputedPropertyName(e, t, 0)))
      : report(e, 52)),
    0 === s &&
      ('constructor' === e.tokenValue
        ? (0 == (32 & i) &&
            1048588 === e.token &&
            ((408 & i) > 0 && report(e, 53, 'accessor'),
            524288 != (524288 & t) && (1 & e.flags ? report(e, 54) : (e.flags |= 1))),
          (i |= 64))
        : (440 & i) > 0 && 'prototype' === e.tokenValue && report(e, 55)),
    (r = e.flags);
  const f = (384 & i) > 0 ? parseGetterSetter(e, 1024 | t, i) : parseMethodDefinition(e, 1024 | t, i);
  e.flags = 96 ^ (96 | r);
  const k = 0 == (32 & i) && 64 & i ? 'constructor' : 128 & i ? 'get' : 256 & i ? 'set' : 'method';
  return 2 & t
    ? {
        type: 'MethodDefinition',
        kind: k,
        static: (32 & i) > 0,
        computed: 1 === s,
        key: o,
        value: f,
        start: p,
        end: e.endIndex,
        loc: setLoc(e, l, c)
      }
    : { type: 'MethodDefinition', kind: k, static: (32 & i) > 0, computed: 1 === s, key: o, value: f };
}
function parseIdentifierFromValue(e, t, n, r, o, s) {
  return 2 & t
    ? { type: 'Identifier', name: n, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
    : { type: 'Identifier', name: n };
}
function parseComputedPropertyName(e, t, n) {
  nextToken(e, t, 1);
  const r = parseExpression(e, 8192 ^ (8192 | t), n);
  return consume(e, t, 21, 0), r;
}
function parseMethodDefinition(e, t, n) {
  const r = 0 == (64 & n) ? 31981568 : 14680064;
  return parseFunctionLiteral(
    e,
    (t =
      ((402657280 | t | r) ^ (402657280 | r)) |
      ((88 & n) << 18) |
      100925440 |
      (16 & n ? 4194304 : 0) |
      (8 & n ? 2097152 : 0)),
    { parent: { parent: void 0, type: 2 }, type: 256, scopeError: void 0 },
    null,
    void 0,
    0,
    'FunctionExpression',
    1,
    e.start,
    e.line,
    e.column
  );
}
function parseGetterSetter(e, t, n) {
  const { start: r, line: o, column: s } = e;
  nextToken(e, t, 0), (e.flags = 256 ^ (256 | e.flags));
  const a = [],
    i = { parent: { parent: void 0, type: 2 }, type: 256, scopeError: void 0 },
    p = 0 == (64 & n) ? 31981568 : 14680064;
  if (
    ((t =
      ((402657280 | t | p) ^ (402657280 | p)) |
      ((88 & n) << 18) |
      100925440 |
      (16 & n ? 4194304 : 0) |
      (8 & n ? 2097152 : 0)),
    17 !== e.token)
  ) {
    128 & n && report(e, 38, 'Getter', 'no', 's');
    let r,
      o = 0,
      s = 0;
    for (; 17 !== e.token; ) {
      const { start: p, line: l, column: c, token: d, tokenValue: u } = e;
      if (
        ((2555904 & e.token) > 0
          ? (1024 != (1024 & t) &&
              (e.flags |= (262144 == (262144 & d) ? 64 : 0) | (537919488 == (537919488 & d) ? 32 : 0)),
            (r = parseAndClassifyIdentifier(e, t, i, d, u, 1 | n, 0, p, l, c, 0)))
          : (34603028 === e.token
              ? (r = parseArrayExpressionOrPattern(e, t, i, 1, 1, 0, 1, 0, p, l, c))
              : 34603021 === e.token
              ? (r = parseObjectLiteralOrPattern(e, t, i, 1, 1, 0, 1, 0, p, l, c))
              : 15 === e.token
              ? (256 & n && report(e, 39), (r = parseSpreadOrRestElement(e, t, i, 17, 1, 0, 0, 1, 0, p, l, c)))
              : report(e, 0),
            (s = 1),
            12 & e.flags && report(e, 70)),
        67108896 === e.token && ((s = 1), (r = parseAssignmentOrPattern(e, t, 1, 0, r, '=', p, l, c))),
        o++,
        a.push(r),
        19 !== e.token)
      )
        break;
      nextToken(e, t, 0);
    }
    256 & n && 1 !== o && report(e, 38, 'Setter', 'one', ''),
      i && void 0 !== i.scopeError && reportScopeError(i.scopeError),
      1 === s && (e.flags |= 256);
  } else 256 & n && report(e, 38, 'Setter', 'one', '');
  consume(e, t, 17, 0);
  const l = parseFunctionBody(e, t, i, void 0, 0, void 0);
  return 2 & t
    ? {
        type: 'FunctionExpression',
        params: a,
        body: l,
        async: 1 == (16 & n),
        generator: 1 == (8 & n),
        id: null,
        start: r,
        end: e.endIndex,
        loc: setLoc(e, o, s)
      }
    : { type: 'FunctionExpression', params: a, body: l, async: 1 == (16 & n), generator: 1 == (8 & n), id: null };
}
function parseFormalParams(e, t, n, r, o, s) {
  nextToken(e, (t = 8192 ^ (8192 | t)), 0);
  const a = [];
  e.flags = 256 ^ (256 | e.flags);
  let i = 0;
  for (; 17 !== e.token; ) {
    let s;
    const { start: p, line: l, column: c, token: d, tokenValue: u } = e;
    if (
      ((2555904 & d) > 0
        ? (1024 != (1024 & t) &&
            (e.flags |= (262144 == (262144 & d) ? 64 : 0) | (537919488 == (537919488 & d) ? 32 : 0)),
          (s = parseAndClassifyIdentifier(e, t, n, d, u, 1 | r, 0, p, l, c, 0)))
        : ((i = 1),
          34603028 === e.token
            ? ((s = parseArrayExpressionOrPattern(e, t, n, 1, 1, 0, r, o, p, l, c)), (i = 1))
            : 34603021 === e.token
            ? ((s = parseObjectLiteralOrPattern(e, t, n, 1, 1, 0, r, o, p, l, c)), (i = 1))
            : 15 === e.token
            ? (s = parseSpreadOrRestElement(e, t, n, 17, 1, 0, 0, r, o, p, l, c))
            : report(e, 0),
          12 & e.flags && report(e, 70)),
      67108896 === e.token && ((i = 1), (s = parseAssignmentOrPattern(e, t, 1, 0, s, '=', p, l, c))),
      a.push(s),
      19 !== e.token)
    )
      break;
    if ((nextToken(e, t, 0), 17 === e.token)) break;
  }
  return (
    void 0 !== n.scopeError && (1 === s || 1 === i || 1024 & t) && reportScopeError(n.scopeError),
    (e.flags |= 1 === i ? 256 : 0),
    consume(e, t, 17, 0),
    a
  );
}
function parseObjectLiteral(e, t, n, r, o, s, a) {
  const i = parseObjectLiteralOrPattern(e, t, void 0, n, 0, r, 8, 0, o, s, a);
  return 16 != (16 & t) && 512 & e.flags && report(e, 68), 16 & e.flags && report(e, 58), i;
}
function parseObjectLiteralOrPattern(e, t, n, r, o, s, a, i, p, l, c) {
  nextToken(e, t, 0);
  const d = [];
  t = 8192 ^ (8192 | t);
  let u,
    x = 0,
    m = 0,
    f = null,
    k = 0,
    y = 'init';
  for (; 16777232 !== e.token; ) {
    const { token: r, start: p, line: l, column: c, tokenValue: g } = e;
    if (15 === r) d.push(parseSpreadOrRestElement(e, t, n, 16777232, o, 0, s, a, i, p, l, c));
    else {
      if (((k = 0), (2555904 & r) > 0))
        if (
          (nextToken(e, t, 0),
          (f = parseIdentifierFromValue(e, t, g, p, l, c)),
          19 === e.token || 16777232 === e.token || 67108896 === e.token)
        )
          (k |= 4),
            1024 & t && 537919488 == (537919488 & r) ? (x |= 8) : validateIdentifier(e, t, a, r),
            addVarOrBlock(e, t, n, g, a, i),
            67108896 === e.token
              ? ((x |= 16), (u = parseAssignmentOrPattern(e, t, o, s, f, '=', p, l, c)))
              : ((x |= 1 === s && 3211376 === r ? 2048 : 0), (u = f));
        else if (22 === e.token) {
          nextToken(e, t, 1);
          const { start: p, line: l, column: c } = e;
          if (('__proto__' === g && m++, (2555904 & e.token) > 0)) {
            const { token: r, tokenValue: d } = e;
            u = parsePrimaryExpression(e, t, a, 0, 1, 1, s, p, l, c);
            const { token: m } = e;
            (u = parseMemberExpression(e, t, u, 0, 0, 0, p, l, c)),
              19 === e.token || 16777232 === e.token
                ? 67108896 === m || 16777232 === m || 19 === m
                  ? 0 === e.assignable
                    ? (x |= 8)
                    : (2162688 & r) > 0 && addVarOrBlock(e, t, n, d, a, i)
                  : (x |= 1 === e.assignable ? 4 : 8)
                : 67108864 == (67108864 & e.token)
                ? (0 === e.assignable ? (x |= 8) : 67108896 !== m ? (x |= 4) : addVarOrBlock(e, t, n, d, a, i),
                  (u = parseAssignmentExpression(e, t, o, s, u, p, l, c)))
                : ((x |= 8),
                  135266304 == (135266304 & e.token) && (u = parseBinaryExpression(e, t, 0, 0, e.token, p, l, c, u)),
                  23 === e.token && (u = parseConditionalExpression(e, t, u, p, l, c)));
          } else
            33554432 == (33554432 & e.token)
              ? ((u =
                  34603021 === e.token
                    ? parseObjectLiteralOrPattern(e, t, n, 0, o, 0, a, i, p, l, c)
                    : parseArrayExpressionOrPattern(e, t, n, 0, o, 0, a, i, p, l, c)),
                (x = e.flags),
                (e.assignable = 8 & x ? 0 : 1),
                19 === e.token || 16777232 === e.token
                  ? 0 === e.assignable && (x |= 8)
                  : 16 & e.flags
                  ? report(e, 56)
                  : ((u = parseMemberExpression(e, t, u, 0, 0, 0, p, l, c)),
                    (x = 0 === e.assignable ? 8 : 0),
                    67108864 == (67108864 & e.token)
                      ? (u = parseAssignmentOrPattern(e, t, o, 0, u, KeywordDescTable[255 & e.token], p, l, c))
                      : ((135266304 & e.token) > 0 && (u = parseBinaryExpression(e, t, 0, 0, e.token, p, l, c, u)),
                        23 === e.token && (u = parseConditionalExpression(e, t, u, p, l, c)),
                        (x |= 0 === e.assignable ? 8 : 4))))
              : ((u = parseLeftHandSideExpression(e, t, 0, 1, 1)),
                (x |= 1 === e.assignable ? 4 : 8),
                19 === e.token || 16777232 === e.token
                  ? 0 === e.assignable && (x |= 8)
                  : ((u = parseMemberExpression(e, t, u, 0, 0, 0, p, l, c)),
                    (x = 0 === e.assignable ? 8 : 0),
                    19 !== e.token &&
                      16777232 !== r &&
                      (67108896 !== e.token && (x |= 8), (u = parseAssignmentExpression(e, t, o, 0, u, p, l, c)))));
        } else
          34603028 === e.token
            ? ((x |= 8),
              (k |= 2162799 === r ? 16 : 0),
              (k |= 2 | (65650 === r ? 128 : 65651 === r ? 256 : 1)),
              (f = parseComputedPropertyName(e, t, 0)),
              (u = parseMethodDefinition(e, t, k)))
            : (2555904 & e.token) > 0
            ? ((x |= 8),
              (f = parseIdentifier(e, t)),
              2162799 === r && (k |= 16),
              (k |= 65650 === r ? 128 : 65651 === r ? 256 : 1),
              (u = (384 & k) > 0 ? parseGetterSetter(e, t, k) : parseMethodDefinition(e, t, k)))
            : 1048588 === e.token
            ? ((x |= 8), (k |= 1), (u = parseMethodDefinition(e, t, k)))
            : 135314230 === e.token
            ? ((65650 !== r && 65651 !== r) || report(e, 91),
              (x |= 8),
              nextToken(e, t, 0),
              (k |= 9 | (2162799 === r ? 16 : 0)),
              (2555904 & e.token) > 0
                ? (f = parseIdentifier(e, t))
                : (524288 & e.token) > 0
                ? (f = parseLiteral(e, t))
                : 34603028 === e.token
                ? ((k |= 2), (f = parseComputedPropertyName(e, t, s)))
                : report(e, 0),
              (u = parseMethodDefinition(e, t, k)))
            : (524288 & e.token) > 0
            ? (2162799 === r && (k |= 16),
              (k |= 65650 === r ? 128 : 65651 === r ? 256 : 1),
              (x |= 8),
              (f = parseLiteral(e, t)),
              (u = (384 & k) > 0 ? parseGetterSetter(e, t, k) : parseMethodDefinition(e, t, k)))
            : report(e, 0);
      else if ((524288 & e.token) > 0)
        if (((f = parseLiteral(e, t)), 22 === e.token)) {
          nextToken(e, t, 1);
          const { start: r, line: p, column: l } = e;
          if (('__proto__' === g && m++, (2555904 & e.token) > 0)) {
            u = parsePrimaryExpression(e, t, a, 0, 1, 1, s, r, p, l);
            const { token: c, tokenValue: d } = e;
            (u = parseMemberExpression(e, t, u, 0, 0, 0, r, p, l)),
              19 === e.token || 16777232 === e.token
                ? 67108896 === c || 16777232 === c || 19 === c
                  ? 0 === e.assignable
                    ? (x |= 8)
                    : n && addVarOrBlock(e, t, n, d, a, i)
                  : (x |= 1 === e.assignable ? 4 : 8)
                : 67108896 === e.token
                ? ((x |= 0 === e.assignable ? 8 : 0), (u = parseAssignmentExpression(e, t, o, 0, u, r, p, l)))
                : ((x |= 8), (u = parseAssignmentExpression(e, t, o, 0, u, r, p, l)));
          } else
            (33554432 & e.token) > 0
              ? ((u =
                  34603021 === e.token
                    ? parseObjectLiteralOrPattern(e, t, n, 0, o, 0, a, i, r, p, l)
                    : parseArrayExpressionOrPattern(e, t, n, 0, o, s, a, i, r, p, l)),
                (x = e.flags),
                (e.assignable = 8 & x ? 0 : 1),
                19 === e.token || 16777232 === e.token
                  ? 0 === e.assignable && (x |= 8)
                  : 16 & e.flags
                  ? report(e, 56)
                  : ((u = parseMemberExpression(e, t, u, 0, 0, 0, r, p, l)),
                    (x = 0 === e.assignable ? 8 : 0),
                    (67108864 & e.token) > 0
                      ? (u = parseAssignmentOrPattern(e, t, o, 0, u, KeywordDescTable[255 & e.token], r, p, l))
                      : ((135266304 & e.token) > 0 && (u = parseBinaryExpression(e, t, 0, 0, e.token, r, p, l, u)),
                        23 === e.token && (u = parseConditionalExpression(e, t, u, r, p, l)),
                        (x |= 0 === e.assignable ? 8 : 4))))
              : ((u = parseLeftHandSideExpression(e, t, 0, 1, 1)),
                (x |= 1 === e.assignable ? 4 : 8),
                19 === e.token || 16777232 === e.token
                  ? 0 === e.assignable && (x |= 8)
                  : ((u = parseMemberExpression(e, t, u, 0, 0, 0, r, p, l)),
                    (x = 0 === e.assignable ? 8 : 0),
                    19 !== e.token &&
                      16777232 !== e.token &&
                      (67108896 !== e.token && (x |= 8), (u = parseAssignmentExpression(e, t, o, 0, u, r, p, l)))));
        } else 1048588 === e.token ? ((k |= 1), (u = parseMethodDefinition(e, t, k)), (x |= 8)) : report(e, 0);
      else if (34603028 === e.token)
        if (((f = parseComputedPropertyName(e, t, s)), (k |= 2), 22 === e.token)) {
          nextToken(e, t, 1);
          const { start: r, line: p, column: l, tokenValue: c, token: d } = e;
          if ((2555904 & e.token) > 0) {
            u = parsePrimaryExpression(e, t, a, 0, 1, 1, s, r, p, l);
            const { token: m } = e;
            (u = parseMemberExpression(e, t, u, 0, 0, 0, r, p, l)),
              (67108864 & e.token) > 0
                ? ((x |= 0 === e.assignable ? 8 : 67108896 === m ? 0 : 4),
                  (u = parseAssignmentOrPattern(e, t, o, 0, u, KeywordDescTable[255 & e.token], r, p, l)))
                : 19 === e.token || 16777232 === e.token
                ? 67108896 === m || 16777232 === m || 19 === m
                  ? 0 === e.assignable
                    ? (x |= 8)
                    : 2162688 == (2162688 & d) && addVarOrBlock(e, t, n, c, a, i)
                  : (x |= 1 === e.assignable ? 4 : 8)
                : ((x |= 8), (u = parseAssignmentExpression(e, t, o, 0, u, r, p, l)));
          } else
            33554432 == (33554432 & e.token)
              ? ((u =
                  34603021 === e.token
                    ? parseObjectLiteralOrPattern(e, t, n, 0, o, 0, a, i, r, p, l)
                    : parseArrayExpressionOrPattern(e, t, n, 0, o, 0, a, i, r, p, l)),
                (x = e.flags),
                (e.assignable = 8 & x ? 0 : 1),
                19 === e.token || 16777232 === e.token
                  ? 0 === e.assignable && (x |= 8)
                  : (16 & x && report(e, 58),
                    (u = parseMemberExpression(e, t, u, 0, 0, 0, r, p, l)),
                    (x = 0 === e.assignable ? 8 | x : 0),
                    67108864 == (67108864 & e.token)
                      ? (67108896 !== e.token && (x |= 8),
                        (u = parseAssignmentOrPattern(e, t, o, 0, u, KeywordDescTable[255 & e.token], r, p, l)))
                      : (135266304 == (135266304 & e.token) &&
                          (u = parseBinaryExpression(e, t, 0, 0, e.token, r, p, l, u)),
                        23 === e.token && (u = parseConditionalExpression(e, t, u, r, p, l)),
                        (x |= 0 === e.assignable ? 8 : 4))))
              : ((u = parseLeftHandSideExpression(e, t, 0, 1, 1)),
                (x |= 1 === e.assignable ? 4 : 8),
                19 === e.token || 16777232 === e.token
                  ? 0 === e.assignable && (x |= 8)
                  : ((u = parseMemberExpression(e, t, u, 0, 0, 0, r, p, l)),
                    (x = 1 === e.assignable ? 0 : 8),
                    19 !== e.token &&
                      16777232 !== e.token &&
                      (67108896 !== e.token && (x |= 8), (u = parseAssignmentExpression(e, t, o, 0, u, r, p, l)))));
        } else
          1048588 === e.token
            ? ((k |= 1), (x |= 2048 & e.flags ? 2048 : 0), (u = parseMethodDefinition(e, t, k)), (x |= 8))
            : report(e, 59);
      else
        135314230 === r
          ? (consume(e, t, 135314230, 0),
            (k |= 8),
            (2555904 & e.token) > 0
              ? ((f = parseIdentifier(e, t)),
                (k |= 1),
                1048588 === e.token ? ((x |= 8), (u = parseMethodDefinition(e, t, k))) : report(e, 0))
              : 524288 == (524288 & e.token)
              ? ((f = parseLiteral(e, t)), (k |= 1), (u = parseMethodDefinition(e, t, k)), (x |= 8))
              : 34603028 === e.token
              ? ((k |= 3), (f = parseComputedPropertyName(e, t, 0)), (u = parseMethodDefinition(e, t, k)), (x |= 8))
              : report(e, 99))
          : report(e, 86, KeywordDescTable[255 & r]);
      (e.flags = (30 ^ (30 | e.flags)) | x),
        (y = 0 == (384 & k) ? 'init' : 256 & k ? 'set' : 'get'),
        d.push(
          2 & t
            ? {
                type: 'Property',
                key: f,
                value: u,
                kind: y,
                computed: (2 & k) > 0,
                method: (1 & k) > 0,
                shorthand: (4 & k) > 0,
                start: p,
                end: e.endIndex,
                loc: setLoc(e, l, c)
              }
            : {
                type: 'Property',
                key: f,
                value: u,
                kind: y,
                computed: (2 & k) > 0,
                method: (1 & k) > 0,
                shorthand: (4 & k) > 0
              }
        );
    }
    if (((x |= e.flags), 19 !== e.token)) break;
    nextToken(e, t, 0);
  }
  consume(e, t, 16777232, 0), m > 1 && (x |= 512);
  const g =
    2 & t
      ? {
          type: o ? 'ObjectPattern' : 'ObjectExpression',
          properties: d,
          start: p,
          end: e.endIndex,
          loc: setLoc(e, l, c)
        }
      : { type: o ? 'ObjectPattern' : 'ObjectExpression', properties: d };
  return 67108864 == (67108864 & e.token) && 0 === r
    ? parseArrayOrObjectAssignmentPattern(e, t, x, o, s, p, l, c, g)
    : ((e.flags = (30 ^ (30 | e.flags)) | x), g);
}
function parseSpreadOrRestElement(e, t, n, r, o, s, a, i, p, l, c, d) {
  let u;
  nextToken(e, t, 1);
  let x = 0;
  const { start: m, line: f, column: k, token: y, tokenValue: g } = e;
  if ((2555904 & y) > 0) {
    (e.assignable = 1), (u = parsePrimaryExpression(e, t, i, 0, 1, 1, a, m, f, k));
    const s = e.token === r || 19 === e.token;
    (u = parseMemberExpression(e, t, u, 0, 0, 0, m, f, k)),
      19 !== e.token &&
        e.token !== r &&
        (0 === e.assignable && 67108896 === e.token && report(e, 56),
        (x |= 8),
        (u = parseAssignmentExpression(e, t, o, 0, u, m, f, k))),
      0 === e.assignable ? (x |= 8) : s ? addVarOrBlock(e, t, n, g, i, p) : (x |= 4);
  } else {
    if ((y === r && report(e, 0), !(33554432 & y))) {
      (x |= 4), (u = parseLeftHandSideExpression(e, t, 0, 1, 1));
      const n = e.token;
      return (
        67108896 === n && n !== r && 19 !== n
          ? (0 === e.assignable && report(e, 60), (u = parseAssignmentExpression(e, t, o, 0, u, m, f, k)), (x |= 8))
          : (19 === n ? (x |= 8) : n !== r && (u = parseAssignmentExpression(e, t, 0, 0, u, m, f, k)),
            (x |= 1 === e.assignable ? 4 : 8)),
        (e.flags = (30 ^ (30 | e.flags)) | x),
        e.token !== r && 19 !== e.token && report(e, 61),
        2 & t
          ? { type: o ? 'RestElement' : 'SpreadElement', argument: u, start: l, end: e.endIndex, loc: setLoc(e, c, d) }
          : { type: o ? 'RestElement' : 'SpreadElement', argument: u }
      );
    }
    {
      u =
        34603021 === e.token
          ? parseObjectLiteralOrPattern(e, t, n, 1, o, 0, i, p, m, f, k)
          : parseArrayExpressionOrPattern(e, t, n, 1, o, 0, i, p, m, f, k);
      const s = e.token;
      67108896 !== s && s !== r && 19 !== s
        ? (16 & e.flags && report(e, 56),
          (u = parseMemberExpression(e, t, u, 0, 0, 0, m, f, k)),
          (x |= 0 === e.assignable ? 8 : 0),
          67108864 == (67108864 & e.token)
            ? (67108896 !== e.token && (x |= 8), (u = parseAssignmentExpression(e, t, o, 0, u, m, f, k)))
            : (135266304 == (135266304 & e.token) && (u = parseBinaryExpression(e, t, 0, 0, e.token, m, f, k, u)),
              23 === e.token && (u = parseConditionalExpression(e, t, u, m, f, k)),
              (x |= 0 === e.assignable ? 8 : 4)))
        : (x |= 16777232 === r && 67108896 !== s ? 8 : e.flags);
    }
  }
  return (
    e.token !== r &&
      (1 & i && (x |= s ? 8 : 4),
      67108896 === e.token
        ? (8 & x && report(e, 60), (u = parseAssignmentOrPattern(e, t, o, 0, u, '=', l, c, d)), (x = 8))
        : (x |= 8)),
    (e.flags = (30 ^ (30 | e.flags)) | x),
    2 & t
      ? { type: o ? 'RestElement' : 'SpreadElement', argument: u, start: l, end: e.endIndex, loc: setLoc(e, c, d) }
      : { type: o ? 'RestElement' : 'SpreadElement', argument: u }
  );
}
function parseImportExpression(e, t, n, r, o) {
  consume(e, t, 1048588, 1), 15 === e.token && report(e, 100);
  const s = parseExpression(e, t, 0);
  return (
    consume(e, t, 17, 0),
    2 & t
      ? { type: 'ImportExpression', source: s, start: n, end: e.endIndex, loc: setLoc(e, r, o) }
      : { type: 'ImportExpression', source: s }
  );
}
function parseAndClassifyIdentifier(e, t, n, r, o, s, a, i, p, l, c = 0) {
  return (
    1024 & t && (262144 == (262144 & r) ? report(e, 26) : 537919488 == (537919488 & r) && report(e, 26)),
    4196352 & t && 3211376 === r && report(e, 30),
    131072 == (131072 & r) && report(e, 28),
    2099200 & t && 3473517 === r && report(e, 36),
    3473483 === r && 48 & s && report(e, 29),
    4196352 & t && 3211376 === r && report(e, 30),
    nextToken(e, t, c),
    addVarOrBlock(e, t, n, o, s, a),
    2 & t
      ? { type: 'Identifier', name: o, start: i, end: e.endIndex, loc: setLoc(e, p, l) }
      : { type: 'Identifier', name: o }
  );
}
function parseBindingPattern(e, t, n, r, o) {
  const { tokenValue: s, start: a, line: i, column: p, token: l } = e;
  if ((2555904 & l) > 0) return parseAndClassifyIdentifier(e, t, n, l, s, r, o, a, i, p, 1);
  33554432 != (33554432 & e.token) && report(e, 0);
  const c =
    34603028 === e.token
      ? parseArrayExpressionOrPattern(e, t, n, 1, 1, 0, r, o, a, i, p)
      : parseObjectLiteralOrPattern(e, t, n, 1, 1, 0, r, o, a, i, p);
  return 8 & e.flags && report(e, 70), 4 & e.flags && report(e, 70), c;
}
function parseImportMetaExpression(e, t, n, r, o, s) {
  return (
    0 == (2048 & t) && report(e, 49),
    nextToken(e, t, 0),
    'meta' !== e.tokenValue && report(e, 0),
    (e.assignable = 0),
    2 & t
      ? {
          type: 'MetaProperty',
          property: parseIdentifier(e, t),
          meta: n,
          start: r,
          end: e.endIndex,
          loc: setLoc(e, o, s)
        }
      : { type: 'MetaProperty', property: parseIdentifier(e, t), meta: n }
  );
}
function parseDirectives(e, t, n, r, o, s, a, i) {
  return 32 & t
    ? 2 & t
      ? {
          type: 'ExpressionStatement',
          expression: o,
          directive: n ? e.source.slice(e.start, e.index) : r,
          start: s,
          end: e.endIndex,
          loc: setLoc(e, a, i)
        }
      : { type: 'ExpressionStatement', expression: o, directive: n ? e.source.slice(e.start, e.index) : r }
    : 2 & t
    ? { type: 'ExpressionStatement', expression: o, start: s, end: e.endIndex, loc: setLoc(e, a, i) }
    : { type: 'ExpressionStatement', expression: o };
}
function parseNonDirectiveExpression(e, t, n, r, o, s) {
  return (
    (n = parseAssignmentExpression(e, t, 0, 0, (n = parseMemberExpression(e, t, n, 0, 0, 0, r, o, s)), r, o, s)),
    19 === e.token ? parseSequenceExpression(e, t, n, r, o, s) : n
  );
}
function parseFunctionDeclaration(e, t, n, r, o) {
  return parseFunctionDeclarationRest(e, t, n, r, o, e.start, e.line, e.column);
}
function parseFunctionDeclarationRest(e, t, n, r, o, s, a, i) {
  nextToken(e, t, 1);
  const p = 2 & r ? consumeOpt(e, t, 135314230, 0) : 0,
    l = 4 & r ? 1 : 0;
  let c,
    d = null,
    u = { parent: void 0, type: 2 };
  if (1048588 === e.token) 8 & r && report(e, 32, 'Function');
  else {
    const { token: s, tokenValue: a, start: i, line: p, column: l } = e;
    validateFunctionName(e, t | ((3072 & t) << 11), s),
      4 & o && 2048 != (2048 & t) ? addVarName(e, t, n, a, 2) : addBlockName(e, t, n, a, 4, o),
      16 & r && declareUnboundVariable(e, a),
      (u = { parent: u, type: 128, scopeError: void 0 }),
      (c = s),
      nextToken(e, t, 0),
      (d = parseIdentifierFromValue(e, t, a, i, p, l));
  }
  return parseFunctionLiteral(
    e,
    (32243712 ^ (32243712 | t)) | 67108864 | ((2 * l + p) << 21),
    u,
    d,
    c,
    r,
    'FunctionDeclaration',
    0,
    s,
    a,
    i
  );
}
function parseClassDeclaration(e, t, n, r) {
  const { start: o, line: s, column: a } = e;
  nextToken(e, t, 0);
  const i = 16777216 ^ (16777216 | t);
  t |= 1024;
  let p = null;
  if (2555904 & e.token && 131159 !== e.token) {
    const { token: o, start: s, line: a, column: i, tokenValue: l } = e;
    isStrictReservedWord(e, t, o, 0) && report(e, 26),
      addBlockName(e, t, n, l, 64, 0),
      2 & r && declareUnboundVariable(e, l),
      nextToken(e, t, 0),
      (p = parseIdentifierFromValue(e, t, l, s, a, i));
  } else 0 == (1 & r) && report(e, 32, 'Class');
  return parseClassDeclarationOrExpressionRest(e, t, i, p, 0, 1, 'ClassDeclaration', o, s, a);
}
function parseVariableStatementOrLexicalDeclaration(e, t, n, r, o) {
  const { start: s, line: a, column: i } = e;
  nextToken(e, t, 0);
  const p = parseVariableDeclarationListAndDeclarator(e, t, n, r, o);
  return (
    expectSemicolon(e, t),
    2 & t
      ? {
          type: 'VariableDeclaration',
          kind: 32 & r ? 'const' : 16 & r ? 'let' : 'var',
          declarations: p,
          start: s,
          end: e.endIndex,
          loc: setLoc(e, a, i)
        }
      : { type: 'VariableDeclaration', kind: 32 & r ? 'const' : 16 & r ? 'let' : 'var', declarations: p }
  );
}
function parseVariableDeclarationListAndDeclarator(e, t, n, r, o) {
  const s = [];
  let a,
    i = null,
    p = null;
  for (; 19 !== e.token; ) {
    const { start: l, line: c, column: d } = e;
    if (
      ((a = r | (33554432 == (33554432 & e.token) ? 1024 : 0)),
      (i = parseBindingPattern(e, t, n, r, o)),
      (p = null),
      67108896 === e.token
        ? (nextToken(e, t, 1), (p = parseExpression(e, t, 0)))
        : 0 != (1056 & a) && 4144 != (4144 & e.token) && report(e, 34, 32 & r ? 'const' : 'destructuring'),
      s.push(
        2 & t
          ? { type: 'VariableDeclarator', init: p, id: i, start: l, end: e.endIndex, loc: setLoc(e, c, d) }
          : { type: 'VariableDeclarator', init: p, id: i }
      ),
      19 !== e.token)
    )
      break;
    nextToken(e, t, 1);
  }
  return s;
}
function parseImportCallDeclaration(e, t, n, r, o) {
  let s = parseImportExpression(e, t, n, r, o);
  return (s = parseMemberExpression(e, t, s, 0, 0, 0, n, r, o)), parseExpressionStatement(e, t, s, n, r, o);
}
function parseImportMetaDeclaration(e, t, n, r, o) {
  let s =
    2 & t
      ? { type: 'Identifier', name: 'import', start: n, end: e.endIndex, loc: setLoc(e, r, o) }
      : { type: 'Identifier', name: 'import' };
  return (
    (s = parseImportMetaExpression(e, t, s, n, r, o)),
    (s = parseMemberExpression(e, t, s, 0, 0, 0, n, r, o)),
    (s = parseAssignmentExpression(e, t, 0, 0, s, n, r, o)),
    parseExpressionStatement(e, t, s, n, r, o)
  );
}
function parseStatementList(e, t, n) {
  const r = [];
  let o = 0;
  for (; 1572868 === e.token; ) {
    const { index: n, start: s, line: a, column: i, tokenValue: p, isUnicodeEscape: l } = e;
    let c = parseLiteral(e, t);
    isExactlyStrictDirective(e, n, s, p) ? ((o = 1), (t |= 1024)) : (o = 0),
      0 === o && (c = parseNonDirectiveExpression(e, t, c, s, a, i)),
      expectSemicolon(e, t),
      r.push(parseDirectives(e, t, l, p, c, s, a, i));
  }
  for (; 16777216 !== e.token; ) r.push(parseStatementListItem(e, t, n, 4, null, null));
  return r;
}
function parseStatementListItem(e, t, n, r, o, s) {
  switch (e.token) {
    case 1179738:
      return parseFunctionDeclaration(e, t, n, 11, r);
    case 2162799:
      return parseAsyncArrowOrAsyncFunctionDeclaration(e, t, n, r, o, 1);
    case 1179728:
      return parseClassDeclaration(e, t, n, 0);
    case 1179724:
      return parseVariableStatementOrLexicalDeclaration(e, t, n, 32, 0);
    case 3473483:
      return parseLetIdentOrVarDeclarationStatement(e, t, n, o, s, r);
    case 1179740:
      return parseImportCallOrForbidImport(e, t);
    case 131158:
      report(e, 0, 'export');
    default:
      return parseStatement(e, t, n, r, o, s, 1);
  }
}
function parseStatement(e, t, n, r, o, s, a) {
  switch (e.token) {
    case 1179722:
      return parseVariableStatementOrLexicalDeclaration(e, t, n, 2, 0);
    case 34603021:
      return parseBlock(e, t, { parent: n, type: 2, scopeError: void 0 }, o, s);
    case 16777234:
      return parseEmptyStatement(e, t);
    case 131166:
      return parseReturnStatement(e, t);
    case 131149:
      return parseBreakStatement(e, t, o);
    case 131154:
      return parseDebuggerStatement(e, t);
    case 131153:
      return parseContinueStatement(e, t, o);
    case 131161:
      return parseForStatement(e, t, n, o);
    case 131156:
      return parseDoWhileStatement(e, t, n, o, s);
    case 131163:
      return parseIfStatement(e, t, n, o);
    case 1179744:
      return parseSwitchStatement(e, t, n, o, s);
    case 1179746:
      return parseThrowStatement(e, t);
    case 131171:
      return parseTryStatement(e, t, n, o);
    case 2162799:
      return parseAsyncArrowOrAsyncFunctionDeclaration(e, t, n, r, o, 0);
    case 131172:
      return parseWhileStatement(e, t, n, o, s);
    case 131173:
      return parseWithStatement(e, t, n, o, s);
    case 1179738:
      report(e, (1040 & t) > 0 ? 82 : 83);
    case 1179728:
      report(e, 84);
    default:
      return parseExpressionOrLabelledStatement(e, t, n, r, o, s, a);
  }
}
function parseLabelledStatement(e, t, n, r, o, s, a, i, p, l, c, d, u) {
  524288 == (524288 & i) && report(e, 0),
    validateIdentifier(e, t, 0, i),
    (o = addLabel(e, a, o, s)),
    nextToken(e, t, 1),
    (s = parseStatementWithLabelSet(e.token, a, o, s));
  const x =
    (1040 & t) > 0 || 1179738 !== e.token
      ? parseStatement(e, t, n, r, o, s, l)
      : parseFunctionDeclaration(e, t, n, 1, r);
  return 2 & t
    ? { type: 'LabeledStatement', label: p, body: x, start: c, end: e.endIndex, loc: setLoc(e, d, u) }
    : { type: 'LabeledStatement', label: p, body: x };
}
function parseImportCallOrForbidImport(e, t) {
  const { start: n, line: r, column: o } = e;
  switch ((nextToken(e, t, 0), e.token)) {
    case 1048588:
      return parseImportCallDeclaration(e, t, n, r, o);
    case 14:
      return parseImportMetaDeclaration(e, t, n, r, o);
    default:
      report(e, 50, 'import');
  }
}
function parseAsyncArrowOrAsyncFunctionDeclaration(e, t, n, r, o, s) {
  const { token: a, tokenValue: i, start: p, line: l, column: c } = e;
  if ((nextToken(e, t, 0), 22 === e.token))
    return parseLabelledStatement(e, t, n, r, o, null, i, a, parseIdentifierFromValue(e, t, i, p, l, c), s, p, l, c);
  const d = e.newLine;
  if (0 === d) {
    if (1179738 === e.token) return 0 === s && report(e, 79), parseFunctionDeclarationRest(e, t, n, 15, r, p, l, c);
    if ((2162688 & e.token) > 0) {
      (2098176 & t) > 0 && 3473517 === e.token && report(e, 36),
        3211376 === e.token && report(e, 87),
        1024 & t && 537919488 == (537919488 & e.token) && report(e, 0);
      let n = parseAsyncArrowIdentifier(
        e,
        t,
        { parent: { parent: void 0, type: 2 }, type: 512, scopeError: void 0 },
        1,
        e.tokenValue,
        e.token,
        parseIdentifier(e, t),
        p,
        l,
        c
      );
      return (
        19 === e.token && (n = parseSequenceExpression(e, t, n, p, l, c)), parseExpressionStatement(e, t, n, p, l, c)
      );
    }
  }
  let u = parseIdentifierFromValue(e, t, i, p, l, c);
  return (
    1048588 === e.token
      ? (u = parseAsyncArrowOrCallExpression(e, 8192 ^ (8192 | t), u, 1, d, 1, 0, p, l, c))
      : (11 === e.token &&
          (u = parseAsyncArrowIdentifier(
            e,
            t,
            { parent: { parent: void 0, type: 2 }, type: 512, scopeError: void 0 },
            1,
            'async',
            e.token,
            u,
            p,
            l,
            c
          )),
        (e.assignable = 1)),
    (u = parseMemberExpression(e, t, u, 0, 0, 0, p, l, c)),
    19 === e.token && (u = parseSequenceExpression(e, t, u, p, l, c)),
    (u = parseAssignmentExpression(e, t, 0, 0, u, p, l, c)),
    (e.assignable = 1),
    parseExpressionStatement(e, t, u, p, l, c)
  );
}
function parseBlock(e, t, n, r, o) {
  const { start: s, line: a, column: i } = e;
  nextToken(e, t, 1);
  const p = [];
  for (; 16777232 !== e.token; ) p.push(parseStatementListItem(e, t, n, 2, r, o));
  return (
    consume(e, t, 16777232, 1),
    2 & t
      ? { type: 'BlockStatement', body: p, start: s, end: e.endIndex, loc: setLoc(e, a, i) }
      : { type: 'BlockStatement', body: p }
  );
}
function parseEmptyStatement(e, t) {
  const { start: n, line: r, column: o } = e;
  return (
    nextToken(e, t, 1),
    2 & t ? { type: 'EmptyStatement', start: n, end: e.endIndex, loc: setLoc(e, r, o) } : { type: 'EmptyStatement' }
  );
}
function parseReturnStatement(e, t) {
  268435456 & t && 0 == (64 & t) && report(e, 21);
  const { start: n, line: r, column: o } = e;
  nextToken(e, t, 1);
  const s = 0 !== e.newLine || 16777216 & e.token ? null : parseExpressions(e, t, 0);
  return (
    expectSemicolon(e, t),
    2 & t
      ? { type: 'ReturnStatement', argument: s, start: n, end: e.endIndex, loc: setLoc(e, r, o) }
      : { type: 'ReturnStatement', argument: s }
  );
}
function parseForStatementWithVariableDeclarations(e, t, n, r, o, s, a) {
  const { token: i, start: p, line: l, column: c, tokenValue: d } = e;
  let u,
    x = null,
    m = null,
    f = null;
  let k = 8,
    y = !1;
  if (
    (nextToken(e, t, 0),
    3473483 === i
      ? 0 != (36110336 & e.token)
        ? (139624500 === e.token
            ? (1024 & t && report(e, 40), (f = parseIdentifierFromValue(e, t, d, p, l, c)))
            : (k = 16),
          (e.assignable = 1))
        : (1024 & t && report(e, 40),
          (f = parseIdentifierFromValue(e, t, d, p, l, c)),
          (e.assignable = 1),
          (f = parseMemberExpression(e, t, f, 0, 0, 0, p, l, c)),
          (y = !0))
      : ((e.assignable = 1), (k = 1179722 === i ? 2 : 32)),
    50 & k)
  ) {
    const r = [];
    let o,
      s = 0;
    for (; 19 !== e.token; ) {
      const { tokenValue: a, start: i, line: p, column: l, token: c } = e;
      let d;
      o = k | (33554432 == (33554432 & e.token) ? 1024 : 0);
      let u = null;
      if (
        (0 != (2555904 & c)
          ? ((d = parseAndClassifyIdentifier(e, t, n, c, a, k, 32, i, p, l, 1)),
            67108896 === e.token
              ? (nextToken(e, t, 1),
                (u = parseExpression(e, 8192 | t, 0)),
                4194304 == (4194304 & e.token) &&
                  (4259957 === e.token && report(e, 33, 'of'),
                  ((139624500 === e.token && 2 != (2 & k)) || 1040 & t) && report(e, 33, 'in')))
              : 0 != (1056 & o) && 4194304 != (4194304 & e.token) && report(e, 34, 32 & k ? 'const' : 'destructuring'))
          : 33554432 == (33554432 & c) &&
            ((d =
              34603028 === e.token
                ? parseArrayExpressionOrPattern(e, 8192 | t, n, 1, 1, 0, k, 32, i, p, l)
                : parseObjectLiteralOrPattern(e, 8192 | t, n, 1, 1, 0, k, 32, i, p, l)),
            12 & e.flags && report(e, 70),
            67108896 === e.token
              ? (nextToken(e, t, 1),
                (u = parseExpression(e, 8192 | t, 0)),
                4194304 == (4194304 & e.token) &&
                  (4259957 === e.token && report(e, 33, 'of'),
                  ((139624500 === e.token && 2 != (2 & k)) || 1040 & t) && report(e, 33, 'in')))
              : 0 != (1056 & o) && 4194304 != (4194304 & e.token) && report(e, 34, 32 & k ? 'const' : 'destructuring')),
        r.push(
          2 & t
            ? { type: 'VariableDeclarator', init: u, id: d, start: i, end: e.endIndex, loc: setLoc(e, p, l) }
            : { type: 'VariableDeclarator', init: u, id: d }
        ),
        s++,
        (e.assignable = 1),
        19 !== e.token)
      )
        break;
      consumeOpt(e, t, 19, 1);
    }
    s > 1 && 4194304 & e.token && report(e, 35),
      (f =
        2 & t
          ? {
              type: 'VariableDeclaration',
              kind: 16 & k ? 'let' : 32 & k ? 'const' : 'var',
              declarations: r,
              start: p,
              end: e.endIndex,
              loc: setLoc(e, l, c)
            }
          : { type: 'VariableDeclaration', kind: k, declarations: r });
  }
  if (4259957 === e.token) {
    y && report(e, 41),
      0 === e.assignable && report(e, 69, 'of'),
      nextToken(e, t, 1),
      (u = parseExpression(e, t, 0)),
      consume(e, t, 17, 1);
    const i = parseStatement(e, 131072 | t, n, 32, r, null, 0);
    return 2 & t
      ? {
          type: 'ForOfStatement',
          body: i,
          left: f,
          right: u,
          await: !1,
          start: o,
          end: e.endIndex,
          loc: setLoc(e, s, a)
        }
      : { type: 'ForOfStatement', body: i, left: f, right: u, await: !1 };
  }
  if (139624500 === e.token) {
    0 === e.assignable && report(e, 69, 'in'),
      nextToken(e, t, 1),
      (u = parseExpressions(e, t, 0)),
      consume(e, t, 17, 1);
    const i = parseStatement(e, 131072 | t, n, 32, r, null, 0);
    return 2 & t
      ? { type: 'ForInStatement', body: i, left: f, right: u, start: o, end: e.endIndex, loc: setLoc(e, s, a) }
      : { type: 'ForInStatement', body: i, left: f, right: u };
  }
  (f = parseAssignmentExpression(e, t, 0, 0, f, p, l, c)),
    19 === e.token && (f = parseSequenceExpression(e, t, f, e.start, e.line, e.column)),
    consume(e, t, 16777234, 1),
    16777234 !== e.token && (x = parseExpressions(e, t, 0)),
    consume(e, t, 16777234, 1),
    17 !== e.token && (m = parseExpressions(e, t, 0)),
    consume(e, t, 17, 1);
  const g = parseStatement(e, 131072 | t, n, 32, r, null, 0);
  return 2 & t
    ? { type: 'ForStatement', body: g, init: f, test: x, update: m, start: o, end: e.endIndex, loc: setLoc(e, s, a) }
    : { type: 'ForStatement', body: g, init: f, test: x, update: m };
}
function parseForStatement(e, t, n, r) {
  const { start: o, line: s, column: a } = e;
  nextToken(e, t, 0);
  const i = (4194304 & t) > 0 && consumeOpt(e, t, 3211376, 0);
  consume(e, t, 1048588, 1), (n = { parent: n, type: 1, scopeError: void 0 });
  let p,
    l = null,
    c = null,
    d = null,
    u = 0;
  const { token: x, start: m, line: f, column: k } = e;
  if (1179722 === x || 3473483 === x || 1179724 === x)
    return parseForStatementWithVariableDeclarations(e, t, n, r, o, s, a);
  if (
    (33554432 == (33554432 & x)
      ? ((d =
          34603021 === x
            ? parseObjectLiteralOrPattern(e, t, n, 1, 0, 0, 8, 32, m, f, k)
            : parseArrayExpressionOrPattern(e, t, n, 1, 0, 0, 8, 32, m, f, k)),
        (u = e.flags),
        0 == (16 & t) && 512 & u && report(e, 68),
        (e.assignable = 8 == (8 & u) ? 0 : 1),
        (d = parseMemberExpression(e, t, d, 0, 0, 0, e.start, e.line, e.column)),
        (u = e.flags))
      : 16777234 === x
      ? 1 === i && report(e, 0)
      : (d = parseLeftHandSideExpression(e, 8192 | t, 0, 1, 1)),
    4259957 === e.token)
  ) {
    0 === e.assignable && report(e, 69, 1 === i ? 'await' : 'of'),
      reinterpretToPattern(e, d),
      nextToken(e, t, 1),
      (p = parseExpression(e, t, 0)),
      consume(e, t, 17, 1);
    const l = parseStatement(e, 131072 | t, n, 32, r, null, 0);
    return 2 & t
      ? {
          type: 'ForOfStatement',
          body: l,
          left: d,
          right: p,
          await: 1 === i,
          start: o,
          end: e.endIndex,
          loc: setLoc(e, s, a)
        }
      : { type: 'ForOfStatement', body: l, left: d, right: p, await: 1 === i };
  }
  if (139624500 === e.token) {
    0 === e.assignable && report(e, 69, 'in'),
      1 === i && report(e, 0),
      reinterpretToPattern(e, d),
      nextToken(e, t, 1),
      (p = parseExpressions(e, t, 0)),
      consume(e, t, 17, 1);
    const l = parseStatement(e, 131072 | t, n, 32, r, null, 0);
    return 2 & t
      ? { type: 'ForInStatement', body: l, left: d, right: p, start: o, end: e.endIndex, loc: setLoc(e, s, a) }
      : { type: 'ForInStatement', body: l, left: d, right: p };
  }
  1 === i && report(e, 0),
    67108896 === e.token
      ? (33554432 == (33554432 & x) && reinterpretToPattern(e, d),
        (d = parseAssignmentExpression(e, t, 0, 0, d, m, f, k)))
      : (16 == (16 & u) && report(e, 69, 'loop'), (d = parseAssignmentExpression(e, t, 0, 0, d, m, f, k))),
    19 === e.token && (d = parseSequenceExpression(e, t, d, e.start, e.line, e.column)),
    consume(e, t, 16777234, 1),
    16777234 !== e.token && (l = parseExpressions(e, t, 0)),
    consume(e, t, 16777234, 1),
    17 !== e.token && (c = parseExpressions(e, t, 0)),
    consume(e, t, 17, 1);
  const y = parseStatement(e, 131072 | t, n, 32, r, null, 0);
  return 2 & t
    ? { type: 'ForStatement', body: y, init: d, test: l, update: c, start: o, end: e.endIndex, loc: setLoc(e, s, a) }
    : { type: 'ForStatement', body: y, init: d, test: l, update: c };
}
function parseDoWhileStatement(e, t, n, r, o) {
  const { start: s, line: a, column: i } = e;
  nextToken(e, t, 1);
  const p = parseStatement(e, 131072 | t, n, 0, r, o, 0);
  consume(e, t, 131172, 0), consume(e, t, 1048588, 1);
  const l = parseExpressions(e, t, 0);
  return (
    consume(e, t, 17, 1),
    consumeOpt(e, t, 16777234, 1),
    2 & t
      ? { type: 'DoWhileStatement', body: p, start: s, test: l, end: e.endIndex, loc: setLoc(e, a, i) }
      : { type: 'DoWhileStatement', body: p, test: l }
  );
}
function parseWhileStatement(e, t, n, r, o) {
  const { start: s, line: a, column: i } = e;
  nextToken(e, t, 0), consume(e, t, 1048588, 1);
  const p = parseExpressions(e, 8192 ^ (8192 | t), 0);
  consume(e, t, 17, 1);
  const l = parseStatement(e, 131072 | t, n, 0, r, o, 0);
  return 2 & t
    ? { type: 'WhileStatement', test: p, body: l, start: s, end: e.endIndex, loc: setLoc(e, a, i) }
    : { type: 'WhileStatement', test: p, body: l };
}
function parseSwitchStatement(e, t, n, r, o) {
  const { start: s, line: a, column: i } = e;
  nextToken(e, t, 0), consume(e, t, 1048588, 1);
  const p = parseExpressions(e, t, 0);
  consume(e, t, 17, 0), consume(e, t, 34603021, 0);
  const l = [];
  let c = 0;
  for (n = { parent: n, type: 0, scopeError: void 0 }; 16777232 !== e.token; ) {
    const { start: s, line: a, column: i } = e,
      p = [],
      d = consumeOpt(e, t, 131150, 1) ? parseExpressions(e, t, 0) : null;
    for (
      131155 === e.token && (nextToken(e, t, 1), 1 === c && report(e, 101), (c = 1)), consume(e, t, 22, 1);
      131150 !== e.token && 16777232 !== e.token && 131155 !== e.token;

    )
      p.push(parseStatementListItem(e, 134217728 | t, n, 2, r, o));
    l.push(
      2 & t
        ? { type: 'SwitchCase', test: d, consequent: p, start: s, end: e.endIndex, loc: setLoc(e, a, i) }
        : { type: 'SwitchCase', test: d, consequent: p }
    );
  }
  return (
    consume(e, t, 16777232, 1),
    2 & t
      ? { type: 'SwitchStatement', discriminant: p, cases: l, start: s, end: e.endIndex, loc: setLoc(e, a, i) }
      : { type: 'SwitchStatement', discriminant: p, cases: l }
  );
}
function parseIfStatement(e, t, n, r) {
  const { start: o, line: s, column: a } = e;
  nextToken(e, t, 0), consume(e, t, 1048588, 1);
  const i = parseExpressions(e, 8192 ^ (8192 | t), 0);
  consume(e, t, 17, 1);
  const p = parseConsequentOrAlternative(e, t, n, r),
    l = consumeOpt(e, t, 131157, 1) ? parseConsequentOrAlternative(e, t, n, r) : null;
  return 2 & t
    ? { type: 'IfStatement', test: i, consequent: p, alternate: l, start: o, end: e.endIndex, loc: setLoc(e, s, a) }
    : { type: 'IfStatement', test: i, consequent: p, alternate: l };
}
function parseConsequentOrAlternative(e, t, n, r) {
  return 1040 & t || 1179738 !== e.token
    ? parseStatement(e, t, n, 0, r, null, 0)
    : parseFunctionDeclaration(e, t, { parent: n, type: 2, scopeError: void 0 }, 11, 0);
}
function parseThrowStatement(e, t) {
  const { start: n, line: r, column: o } = e;
  nextToken(e, t, 1), 0 !== e.newLine && report(e, 44);
  const s = parseExpressions(e, t, 0);
  return (
    expectSemicolon(e, t),
    2 & t
      ? { type: 'ThrowStatement', argument: s, start: n, end: e.endIndex, loc: setLoc(e, r, o) }
      : { type: 'ThrowStatement', argument: s }
  );
}
function parseBreakStatement(e, t, n) {
  const { start: r, line: o, column: s } = e;
  nextToken(e, t, 1);
  let a = null;
  if (0 === e.newLine && 0 == (16777216 & e.token)) {
    const { tokenValue: r, start: o, line: s, column: i } = e;
    nextToken(e, t, 1),
      (a = parseIdentifierFromValue(e, t, r, o, s, i)),
      0 === isValidBreakLabel(e, n, r) && report(e, 80, r);
  } else 0 == (134348800 & t) && report(e, 85);
  return (
    expectSemicolon(e, t),
    2 & t
      ? { type: 'BreakStatement', label: a, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
      : { type: 'BreakStatement', label: a }
  );
}
function parseContinueStatement(e, t, n) {
  0 == (131072 & t) && report(e, 81);
  const { start: r, line: o, column: s } = e;
  nextToken(e, t, 1);
  let a = null;
  if (0 === e.newLine && 16777216 != (16777216 & e.token)) {
    const { tokenValue: r, start: o, line: s, column: i } = e;
    nextToken(e, t, 1), (a = parseIdentifierFromValue(e, t, r, o, s, i));
    let p,
      l = 0;
    e: for (; n; ) {
      if (n.iterationLabels) {
        p = n.iterationLabels;
        for (let e = 0; e < p.length; e++)
          if (p[e] === r) {
            l = 1;
            break e;
          }
      }
      n = n.parentLabels;
    }
    0 === l && report(e, 80, r);
  }
  return (
    expectSemicolon(e, t),
    2 & t
      ? { type: 'ContinueStatement', label: a, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
      : { type: 'ContinueStatement', label: a }
  );
}
function parseTryStatement(e, t, n, r) {
  const { start: o, line: s, column: a } = e;
  nextToken(e, t, 1);
  const i = parseBlock(e, t, { parent: n, type: 16, scopeError: void 0 }, r, null);
  let p = null;
  if (131151 === e.token) {
    const { start: o, line: s, column: a } = e;
    nextToken(e, t, 1);
    let i = null,
      l = n;
    1048588 === e.token &&
      (nextToken(e, t, 0),
      (i = parseBindingPattern(
        e,
        t,
        (n = { parent: n, type: 4, scopeError: void 0 }),
        (33554432 & e.token) > 0 ? 256 : 512,
        0
      )),
      consume(e, t, 17, 1),
      (l = { parent: n, type: 32, scopeError: void 0 }));
    const c = parseBlock(e, t, l, r, null);
    p =
      2 & t
        ? { type: 'CatchClause', param: i, body: c, start: o, end: e.endIndex, loc: setLoc(e, s, a) }
        : { type: 'CatchClause', param: i, body: c };
  }
  const l = consumeOpt(e, t, 131160, 0) ? parseBlock(e, t, { parent: n, type: 4, scopeError: void 0 }, r, null) : null;
  return (
    p || l || report(e, 42),
    2 & t
      ? { type: 'TryStatement', block: i, handler: p, finalizer: l, start: o, end: e.endIndex, loc: setLoc(e, s, a) }
      : { type: 'TryStatement', block: i, handler: p, finalizer: l }
  );
}
function parseWithStatement(e, t, n, r, o) {
  const { start: s, line: a, column: i } = e;
  nextToken(e, t, 0), 1024 & t && report(e, 43), consume(e, t, 1048588, 1);
  const p = parseExpressions(e, t, 0);
  consume(e, t, 17, 1);
  const l = parseStatement(e, t, n, 0, r, o, 0);
  return 2 & t
    ? { type: 'WithStatement', object: p, body: l, start: s, end: e.endIndex, loc: setLoc(e, a, i) }
    : { type: 'WithStatement', object: p, body: l };
}
function parseDebuggerStatement(e, t) {
  const { start: n, line: r, column: o } = e;
  return (
    nextToken(e, t, 1),
    expectSemicolon(e, t),
    2 & t
      ? { type: 'DebuggerStatement', start: n, end: e.endIndex, loc: setLoc(e, r, o) }
      : { type: 'DebuggerStatement' }
  );
}
function parseLetIdentOrVarDeclarationStatement(e, t, n, r, o, s) {
  const { token: a, tokenValue: i, start: p, line: l, column: c } = e;
  if ((nextToken(e, t, 0), 35717120 & e.token)) {
    const r = parseVariableDeclarationListAndDeclarator(e, t, n, 16, 0);
    return (
      expectSemicolon(e, t),
      2 & t
        ? { type: 'VariableDeclaration', kind: 'let', declarations: r, start: p, end: e.endIndex, loc: setLoc(e, l, c) }
        : { type: 'VariableDeclaration', kind: 'let', declarations: r }
    );
  }
  (e.assignable = 1), 1024 & t && report(e, 87);
  let d = parseIdentifierFromValue(e, t, i, p, l, c);
  return 22 === e.token
    ? parseLabelledStatement(e, t, n, s, r, o, i, a, d, 0, p, l, c)
    : (11 === e.token
        ? (d = parseAsyncArrowIdentifier(
            e,
            t,
            { parent: { parent: void 0, type: 2 }, type: 512, scopeError: void 0 },
            0,
            i,
            a,
            d,
            p,
            l,
            c
          ))
        : ((d = parseMemberExpression(e, t, d, 0, 0, 0, p, l, c)),
          (d = parseAssignmentExpression(e, t, 0, 0, d, p, l, c))),
      19 === e.token && (d = parseSequenceExpression(e, t, d, p, l, c)),
      parseExpressionStatement(e, t, d, p, l, c));
}
function parseExpressionOrLabelledStatement(e, t, n, r, o, s, a) {
  const { tokenValue: i, token: p, start: l, line: c, column: d } = e;
  let u = parsePrimaryExpression(e, t, 0, 0, 1, 1, 0, l, c, d);
  return (
    3473483 === p && 34603028 === e.token && report(e, 0),
    22 === e.token
      ? parseLabelledStatement(e, t, n, r, o, s, i, p, u, a, l, c, d)
      : ((u = parseMemberExpression(e, t, u, 0, 0, 0, l, c, d)),
        (u = parseAssignmentExpression(e, t, 0, 0, u, l, c, d)),
        19 === e.token && (u = parseSequenceExpression(e, t, u, l, c, d)),
        parseExpressionStatement(e, t, u, l, c, d))
  );
}
function parseModuleItemListAndDirectives(e, t, n) {
  const r = [];
  if (32 & t)
    for (; 1572868 === e.token; ) {
      const { start: n, line: o, column: s, isUnicodeEscape: a, tokenValue: i } = e;
      let p = parseLiteral(e, t);
      16777234 !== e.token && (p = parseNonDirectiveExpression(e, t, p, n, o, s)), expectSemicolon(e, t);
      const l = a ? e.source.slice(e.start, e.index) : i;
      r.push(
        2 & t
          ? {
              type: 'ExpressionStatement',
              expression: p,
              directive: l,
              start: n,
              end: e.endIndex,
              loc: setLoc(e, o, s)
            }
          : { type: 'ExpressionStatement', expression: p, directive: l }
      );
    }
  for (; 16777216 !== e.token; ) r.push(parseModuleItem(e, t, n));
  return r;
}
function parseModuleItem(e, t, n) {
  return 131158 === e.token
    ? parseExportDeclaration(e, t, n)
    : 1179740 === e.token
    ? parseImportDeclaration(e, t, n)
    : parseStatementListItem(e, t, n, 4, null, null);
}
function parseImportDeclaration(e, t, n) {
  const { start: r, line: o, column: s } = e;
  nextToken(e, t, 0);
  let a = null,
    i = [];
  if (1572868 === e.token)
    return (
      (a = parseLiteral(e, t)),
      expectSemicolon(e, t),
      2 & t
        ? { type: 'ImportDeclaration', specifiers: i, source: a, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
        : { type: 'ImportDeclaration', specifiers: i, source: a }
    );
  if ((2555904 & e.token) > 0) {
    const { token: p, tokenValue: l, start: c, line: d, column: u } = e;
    if (
      (isValidIdentifier(t, p) || report(e, 26),
      537919488 == (537919488 & p) && report(e, 27),
      addBlockName(e, t, n, l, 16, 0),
      nextToken(e, t, 0),
      (i = [
        2 & t
          ? {
              type: 'ImportDefaultSpecifier',
              local: parseIdentifierFromValue(e, t, l, c, d, u),
              start: c,
              end: e.endIndex,
              loc: setLoc(e, d, u)
            }
          : { type: 'ImportDefaultSpecifier', local: parseIdentifierFromValue(e, t, l, c, d, u) }
      ]),
      19 !== e.token)
    )
      return (
        (a = parseModuleSpecifier(e, t)),
        expectSemicolon(e, t),
        2 & t
          ? { type: 'ImportDeclaration', specifiers: i, source: a, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
          : { type: 'ImportDeclaration', specifiers: i, source: a }
      );
    nextToken(e, t, 0);
  }
  switch (e.token) {
    case 135314230:
      const { start: a, line: p, column: l } = e;
      nextToken(e, t, 0),
        consume(e, t, 65646, 0),
        addBlockName(e, t, n, e.tokenValue, 16, 0),
        i.push(
          2 & t
            ? {
                type: 'ImportNamespaceSpecifier',
                local: parseIdentifier(e, t),
                start: a,
                end: e.endIndex,
                loc: setLoc(e, p, l)
              }
            : { type: 'ImportNamespaceSpecifier', local: parseIdentifier(e, t) }
        );
      break;
    case 34603021:
      for (nextToken(e, t, 0); (2555904 & e.token) > 0; ) {
        let { start: r, line: o, column: s, tokenValue: a, token: p } = e;
        nextToken(e, t, 0);
        const l = parseIdentifierFromValue(e, t, a, r, o, s);
        let c;
        65646 === e.token
          ? (nextToken(e, t, 0),
            (524288 & e.token) > 0 || 19 === e.token ? report(e, 105) : validateIdentifier(e, t, 32, e.token),
            (a = e.tokenValue),
            (c = parseIdentifier(e, t)))
          : (validateIdentifier(e, t, 32, p), 537919488 == (537919488 & p) && report(e, 27), (c = l)),
          addBlockName(e, t, n, a, 16, 0),
          i.push(
            2 & t
              ? { type: 'ImportSpecifier', local: c, imported: l, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
              : { type: 'ImportSpecifier', local: c, imported: l }
          ),
          16777232 !== e.token && consume(e, t, 19, 0);
      }
      consume(e, t, 16777232, 0);
      break;
    case 1048588:
      return parseImportCallDeclaration(e, t, r, o, s);
    case 14:
      return parseImportMetaDeclaration(e, t, r, o, s);
    default:
      report(e, 0);
  }
  return (
    (a = parseModuleSpecifier(e, t)),
    expectSemicolon(e, t),
    2 & t
      ? { type: 'ImportDeclaration', specifiers: i, source: a, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
      : { type: 'ImportDeclaration', specifiers: i, source: a }
  );
}
function parseModuleSpecifier(e, t) {
  return consume(e, t, 65652, 0), 1572868 !== e.token && report(e, 0), parseLiteral(e, t);
}
function parseExportDefault(e, t, n, r, o, s) {
  nextToken(e, t, 1);
  let a = null;
  switch (e.token) {
    case 1179738:
      a = parseFunctionDeclaration(e, t, n, 3, 4);
      break;
    case 1179728:
      a = parseClassDeclaration(e, t, n, 1);
      break;
    case 2162799:
      const { tokenValue: r, start: o, line: s, column: i } = e;
      nextToken(e, t, 0),
        0 === e.newLine &&
          (1179738 === e.token
            ? (a = parseFunctionDeclarationRest(e, t, n, 7, 64, o, s, i))
            : (2162688 & e.token) > 0
            ? ((a = parseIdentifier(e, t)), (a = parseArrowFunction(e, t, n, [a], 1, o, s, i)))
            : ((a = parseIdentifierFromValue(e, t, r, o, s, i)),
              1048588 === e.token &&
                (a = parseAsyncArrowOrCallExpression(e, 8192 ^ (8192 | t), a, 1, e.newLine, 1, 0, o, s, i)),
              (a = parseMemberExpression(e, t, a, 0, 0, 0, o, s, i)),
              (a = parseAssignmentExpression(e, t, 0, 0, a, o, s, i))));
      break;
    default:
      (a = parseExpression(e, t, 0)), expectSemicolon(e, t);
  }
  return (
    declareUnboundVariable(e, 'default'),
    2 & t
      ? { type: 'ExportDefaultDeclaration', declaration: a, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
      : { type: 'ExportDefaultDeclaration', declaration: a }
  );
}
function parseExportDeclaration(e, t, n) {
  const { start: r, line: o, column: s } = e;
  nextToken(e, t, 1);
  let a = [],
    i = null,
    p = null;
  switch (e.token) {
    case 131155:
      return parseExportDefault(e, t, n, r, o, s);
    case 135314230:
      if ((nextToken(e, t, 0), 65646 === e.token)) {
        nextToken(e, t, 0), declareUnboundVariable(e, e.tokenValue);
        const n = parseIdentifier(e, t);
        return (
          (a = [
            2 & t
              ? {
                  type: 'ExportAllDeclaration',
                  source: p,
                  exported: n,
                  start: r,
                  end: e.endIndex,
                  loc: setLoc(e, o, s)
                }
              : { type: 'ExportAllDeclaration', source: p, exported: n }
          ]),
          (p = parseModuleSpecifier(e, t)),
          expectSemicolon(e, t),
          2 & t
            ? {
                type: 'ExportNamedDeclaration',
                source: p,
                specifiers: a,
                start: r,
                end: e.endIndex,
                loc: setLoc(e, o, s)
              }
            : { type: 'ExportNamedDeclaration', source: p, specifiers: a }
        );
      }
      return (
        consume(e, t, 65652, 0),
        (p = parseLiteral(e, t)),
        expectSemicolon(e, t),
        2 & t
          ? { type: 'ExportAllDeclaration', source: p, exported: null, start: r, end: e.endIndex, loc: setLoc(e, o, s) }
          : { type: 'ExportAllDeclaration', source: p, exported: null }
      );
    case 34603021: {
      nextToken(e, t, 0);
      const n = [],
        r = [];
      let o, s, i;
      for (; (2555904 & e.token) > 0; ) {
        const { start: p, line: l, column: c, tokenValue: d } = e;
        (i = d),
          nextToken(e, t, 0),
          (o = parseIdentifierFromValue(e, t, d, p, l, c)),
          65646 === e.token
            ? (nextToken(e, t, 0),
              (524288 & e.token) > 0 && report(e, 105),
              (i = e.tokenValue),
              (s = parseIdentifier(e, t)))
            : (s = o),
          n.push(i),
          r.push(d),
          a.push(
            2 & t
              ? { type: 'ExportSpecifier', local: o, exported: s, start: p, end: e.endIndex, loc: setLoc(e, l, c) }
              : { type: 'ExportSpecifier', local: o, exported: s }
          ),
          16777232 !== e.token && consume(e, t, 19, 0);
      }
      if ((consume(e, t, 16777232, 1), 65652 === e.token))
        nextToken(e, t, 0), 1572868 !== e.token && report(e, 104, 'Export'), (p = parseLiteral(e, t));
      else {
        let t = n.length;
        for (; t--; ) declareUnboundVariable(e, n[t]), addBindingToExports(e, r[t]);
      }
      expectSemicolon(e, t);
      break;
    }
    case 1179728:
      i = parseClassDeclaration(e, t, n, 2);
      break;
    case 1179738:
      i = parseFunctionDeclaration(e, t, n, 27, 4);
      break;
    case 3473483:
      i = parseVariableStatementOrLexicalDeclaration(e, t, n, 16, 64);
      break;
    case 1179724:
      i = parseVariableStatementOrLexicalDeclaration(e, t, n, 32, 64);
      break;
    case 1179722:
      i = parseVariableStatementOrLexicalDeclaration(e, t, n, 2, 64);
      break;
    case 2162799: {
      const { start: r, line: o, column: s } = e;
      if ((nextToken(e, t, 0), 0 === e.newLine && 1179738 === e.token)) {
        i = parseFunctionDeclarationRest(e, t, n, 15, 64, r, o, s);
        break;
      }
    }
    default:
      report(e, 0, KeywordDescTable[255 & e.token]);
  }
  return 2 & t
    ? {
        type: 'ExportNamedDeclaration',
        source: p,
        specifiers: a,
        declaration: i,
        start: r,
        end: e.endIndex,
        loc: setLoc(e, o, s)
      }
    : { type: 'ExportNamedDeclaration', source: p, specifiers: a, declaration: i };
}
function parseScript(e, t) {
  let n = 0;
  null != t &&
    (t.next && (n |= 1),
    t.loc && (n |= 2),
    t.disableWebCompat && (n |= 16),
    t.directives && (n |= 40),
    t.raw && (n |= 8),
    t.globalReturn && (n |= 64),
    t.impliedStrict && (n |= 1024));
  const r = create(e);
  skipHashBang(r, e), nextToken(r, n, 1);
  const o = parseStatementList(r, 268435456 | n, { parent: void 0, type: 2 });
  return 2 & n
    ? {
        type: 'Program',
        sourceType: 'script',
        body: o,
        start: 0,
        end: e.length,
        loc: { start: { line: 1, column: 0 }, end: { line: r.lineBase, column: r.index - r.offset } }
      }
    : { type: 'Program', sourceType: 'script', body: o };
}
function parseModule(e, t) {
  let n = 3072;
  null != t &&
    (t.next && (n |= 1),
    t.loc && (n |= 2),
    t.disableWebCompat && (n |= 16),
    t.directives && (n |= 40),
    t.globalReturn && (n |= 64),
    t.raw && (n |= 8));
  const r = create(e);
  skipHashBang(r, e), nextToken(r, n, 1);
  const o = { parent: void 0, type: 2 },
    s = parseModuleItemListAndDirectives(r, 268435456 | n, o);
  for (const e in r.exportedBindings) '#' !== e[0] || o[e] || report(r, 103, e.slice(1));
  return 2 & n
    ? {
        type: 'Program',
        sourceType: 'module',
        body: s,
        start: 0,
        end: e.length,
        loc: { start: { line: 1, column: 0 }, end: { line: r.lineBase, column: r.index - r.offset } }
      }
    : { type: 'Program', sourceType: 'module', body: s };
}
function parse(e, t) {
  return t && t.module ? parseModule(e, t) : parseScript(e, t);
}
(exports.parse = parse), (exports.parseModule = parseModule), (exports.parseScript = parseScript);
