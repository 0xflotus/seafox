import { Context } from '../../../src/parser/common';
import * as t from 'assert';
import { parseModule, parseScript } from '../../../src/seafox';

describe('Declarations - Const', () => {
  for (const [source, ctx] of [
    [`const x = a; const x = b;`, Context.Empty],
    [`const x = a; function x(){};`, Context.Empty],
    [`const x = a; const x = b;`, Context.OptionsDisableWebCompat],
    [`const x = a; function x(){};`, Context.OptionsDisableWebCompat],
    [`const x; { let x; var y; }`, Context.Empty],
    [`const const;`, Context.Empty],
    [`const let`, Context.Empty],
    [`const []`, Context.Empty],
    [`const {}`, Context.Empty],
    //  [`let l\\u0065t = 1`, Context.Empty],
    //     [`const l\\u0065t = 1`, Context.Empty],
    // [`let l\\u0065t = 1`, Context.Empty],
    //     [`const [l\\u0065t] = 1`, Context.Empty],
    // [`for (const l\\u0065t in {}) {}`, Context.Empty],
    [`const {private} = x;`, Context.Strict],
    [`const implements = 1;`, Context.Strict],
    [`const protected = 1;`, Context.Strict],
    [`const private = 1;`, Context.Strict],
    [`const interface = 1;`, Context.Strict],
    [`const static = 1;`, Context.Strict],
    [`const break = 1;`, Context.Strict],
    [`const while = 1;`, Context.Strict],
    [`const while = 1;`, Context.Strict],
    [`const while = 1;`, Context.Strict],
    [`const export = 1;`, Context.Empty],
    [`const if = 1;`, Context.Empty],
    [`const debugger = 1;`, Context.OptionsDisableWebCompat],
    [`const delete = 1;`, Context.OptionsDisableWebCompat],
    [`const enum = 1;`, Context.Empty],
    [`const {foo:a};`, Context.Empty],
    [`const {foo=a};`, Context.Empty],
    [`const {foo} = x, {foo} = y;`, Context.Empty],
    [`const x, {foo} = y;`, Context.Empty],
    [`for (const [foo] = arr, bar in arr);`, Context.Empty],
    [`for (const [.x] in obj);`, Context.Empty],
    [`for (const [...[foo, bar],] in obj);`, Context.Empty],
    [`for (const {x} = a, y in obj);`, Context.Empty],
    [`for (const {x:y=z});`, Context.Empty],
    [`for (const {x,,} of obj);`, Context.Empty],
    [`const [...foo,] = obj;`, Context.Empty],
    [`const [...foo, bar] = obj;`, Context.Empty],
    [`const [...bar = foo] = obj;`, Context.Empty],
    [`const [.x] = obj;`, Context.Empty],
    [`const {[x]} = z;`, Context.Empty],
    [`const {,,} = obj;`, Context.Empty],
    [`const x, {y};`, Context.Empty],
    [`const {a:=c} = z;`, Context.Empty],
    [`const {x:y};`, Context.Empty],
    [`const {x,,} = obj;`, Context.Empty],
    [`const foo;`, Context.Empty],
    [`const foo, bar;`, Context.Empty],
    [
      `const
    foo`,
      Context.Empty
    ],
    [`const x, [foo] = y;`, Context.Empty],
    [`const [... ...foo] = obj;`, Context.Empty],
    [`const [...,] = obj;`, Context.Empty],
    [`const [...] = obj;`, Context.Empty],
    [`const [..x] = obj;`, Context.Empty],
    [`const [foo] = x, b;`, Context.Empty],
    [`const [foo=a];`, Context.Empty],
    [`const foo, [bar];`, Context.Empty],
    [`const a = b; let a = c`, Context.Empty],
    [`const {x:x, x:x} = c`, Context.Empty],
    [`const [x, {x}] = y`, Context.Empty],
    [`const [x, x] = c`, Context.Empty],
    [`const x = x, x = y;`, Context.Empty],
    [`const a = b, a = c`, Context.Empty],
    [`const {x:c, y:c} = {};`, Context.Empty],
    [`const a = 0, a = 1;`, Context.Empty],
    [`const {a:a, a:a} = {};`, Context.Empty],
    [`const a = 1; const a = 2`, Context.Empty],
    [`const x = x, x = y;`, Context.OptionsDisableWebCompat],
    [`const a = b, a = c`, Context.OptionsDisableWebCompat],
    [`const {x:c, y:c} = {};`, Context.OptionsDisableWebCompat],
    [`const a = 0, a = 1;`, Context.OptionsDisableWebCompat],
    [`const {a:a, a:a} = {};`, Context.OptionsDisableWebCompat],
    [`const a = 1; const a = 2`, Context.OptionsDisableWebCompat],
    ['const {foo,,} = x;', Context.Empty],
    ['const [.x] = obj;', Context.Empty],
    ['const [..x] = obj;', Context.Empty],
    ['const [...] = obj;', Context.Empty],
    ['const [... ...foo] = obj;', Context.Empty],
    ['const [...[a, b],,] = obj;', Context.Empty],
    ['const [...foo,] = obj;', Context.Empty],
    ['for (const {};;);', Context.Empty],
    ['const {};', Context.Empty],
    ['const foo;', Context.Empty],
    [`do const x = 1; while (false)`, Context.Empty],
    ['while (false) const x = 1;', Context.Empty],
    ['label: const x;', Context.Empty],
    ['while (false) const x;', Context.Empty],
    ['const [...x = []] = [];', Context.Empty],
    ['const [...[x], y] = [1, 2, 3];', Context.Empty],
    ['const x, y = 1;', Context.Empty],
    ['do const x = 1; while (false)', Context.Empty],
    ['const [...{ x }, y] = [1, 2, 3];', Context.Empty],
    ['const [...x, y] = [1, 2, 3];', Context.Empty],
    // Babylon PR: https://github.com/babel/babylon/pull/195
    ['const { foo: enum } = bar();', Context.Empty],
    ['function foo({ bar: enum }) {}', Context.Empty],
    ['const foo', Context.Empty],
    ['const foo, bar;', Context.Empty],
    ['const foo, bar', Context.Empty],
    ['const\nfoo', Context.Empty],
    ['const\nfoo()', Context.Empty],
    ['const [foo] = arr, bar;', Context.Empty],
    ['const foo, [bar] = arr2;', Context.Empty],
    ['const [foo];', Context.Empty],
    ['const [foo = x];', Context.Empty],
    ['const [foo], bar;', Context.Empty],
    ['const foo, [bar];', Context.Empty],
    ['const [foo:bar] = obj;', Context.Empty],
    ['const [...foo, bar] = obj;', Context.Empty],
    ['const [...foo,] = obj;', Context.Empty],
    ['const [...foo,,] = obj;', Context.Empty],
    ['const [...[foo + bar]] = obj;', Context.Empty],
    ['const [...[foo, bar],] = obj;', Context.Empty],
    ['const [...[foo, bar],,] = obj;', Context.Empty],
    ['const [...bar = foo] = obj;', Context.Empty],
    ['const [... ...foo] = obj;', Context.Empty],
    ['const [...] = obj;', Context.Empty],
    ['const const', Context.Empty],
    ['const', Context.Empty],
    ['const a = 2,', Context.Empty],
    ['const [...,] = obj;', Context.Empty],
    ['const [.x] = obj;', Context.Empty],
    ['const [..x] = obj;', Context.Empty],
    ['const {,} = obj;', Context.Empty],
    ['const {,,} = obj;', Context.Empty],
    ['const {x,,} = obj;', Context.Empty],
    ['const {,x} = obj;', Context.Empty],
    ['const {,,x} = obj;', Context.Empty],
    ['const {x,, y} = obj;', Context.Empty],
    ['const {x} = a, obj;', Context.Empty],
    ['const x, {y} = obj;', Context.Empty],
    ['const {x};', Context.Empty],
    ['const {x}, {y} = z;', Context.Empty],
    ['const x, {y};', Context.Empty],
    ['const {x}, y;', Context.Empty],
    ['const x = y, {z};', Context.Empty],
    ['const let = 1;', Context.Strict],
    ['let let = 1;', Context.Strict],
    ['const {x=y};', Context.Empty],
    ['const {x:y=z};', Context.Empty],
    ['const {x:y=z} = obj, {a:b=c};', Context.Empty],
    ['const {a:=c} = z;', Context.Empty],
    ['const {[x] = y} = z;', Context.Empty],
    ['const {[x]: y};', Context.Empty],
    ['const {[x]} = z;', Context.Empty],
    ['const {[x] = y} = z;', Context.Empty],
    ['const {[x]: y = z};', Context.Empty],
    ['const {...[a]} = x', Context.OptionsDisableWebCompat],
    ['const {...{a}} = x', Context.OptionsDisableWebCompat],
    ['const {...[a]} = x', Context.Empty],
    ['const {...{a}} = x', Context.Empty],
    ['const {...a=b} = x', Context.Empty],
    ['const {...a+b} = x', Context.Empty],
    ['const [(x)] = []', Context.Empty],
    ['const a, [...x] = y', Context.Empty],
    ['const foo;', Context.Strict],
    ['const foo, bar = x;', Context.Empty],
    ['const [a)] = [];', Context.Empty],
    ['const [[(a)], ((((((([b])))))))] = [[],[]];', Context.Empty],
    ['const [a--] = [];', Context.Empty],
    ['const [++a] = [];', Context.Empty],
    ['const [1, a] = [];', Context.Empty],
    ['const [...a, b] = [];', Context.Empty],
    ['const foo =x, bar;', Context.Empty],
    ['const foo, bar;', Context.Module],
    ['const [a, let, b] = [1, 2, 3];', Context.Empty],
    ['const {let} = 1;', Context.Empty]
  ]) {
    it(source as string, () => {
      t.throws(() => {
        parseScript(source as string, {
          disableWebCompat: ((ctx as any) & Context.OptionsDisableWebCompat) !== 0,
          impliedStrict: ((ctx as any) & Context.Strict) !== 0
        });
      });

      t.throws(() => {
        parseModule(source as string, {
          disableWebCompat: ((ctx as any) & Context.OptionsDisableWebCompat) !== 0
        });
      });
    });
  }
});
